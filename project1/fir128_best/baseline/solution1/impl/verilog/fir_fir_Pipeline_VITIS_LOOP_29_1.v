// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir_fir_Pipeline_VITIS_LOOP_29_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        acc_out,
        acc_out_ap_vld,
        shift_reg_0_address0,
        shift_reg_0_ce0,
        shift_reg_0_q0,
        shift_reg_0_address1,
        shift_reg_0_ce1,
        shift_reg_0_we1,
        shift_reg_0_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] acc_out;
output   acc_out_ap_vld;
output  [2:0] shift_reg_0_address0;
output   shift_reg_0_ce0;
input  [31:0] shift_reg_0_q0;
output  [2:0] shift_reg_0_address1;
output   shift_reg_0_ce1;
output   shift_reg_0_we1;
output  [31:0] shift_reg_0_d1;

reg ap_idle;
reg acc_out_ap_vld;
reg shift_reg_0_ce0;
reg shift_reg_0_ce1;
reg shift_reg_0_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln29_fu_549_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [6:0] c_address0;
reg    c_ce0;
wire   [4:0] c_q0;
wire   [2:0] shift_reg_1_address0;
reg    shift_reg_1_ce0;
wire   [31:0] shift_reg_1_q0;
wire   [2:0] shift_reg_1_address1;
reg    shift_reg_1_ce1;
reg    shift_reg_1_we1;
wire   [2:0] shift_reg_2_address0;
reg    shift_reg_2_ce0;
wire   [31:0] shift_reg_2_q0;
wire   [2:0] shift_reg_2_address1;
reg    shift_reg_2_ce1;
reg    shift_reg_2_we1;
wire   [2:0] shift_reg_3_address0;
reg    shift_reg_3_ce0;
wire   [31:0] shift_reg_3_q0;
wire   [2:0] shift_reg_3_address1;
reg    shift_reg_3_ce1;
reg    shift_reg_3_we1;
wire   [2:0] shift_reg_4_address0;
reg    shift_reg_4_ce0;
wire   [31:0] shift_reg_4_q0;
wire   [2:0] shift_reg_4_address1;
reg    shift_reg_4_ce1;
reg    shift_reg_4_we1;
wire   [2:0] shift_reg_5_address0;
reg    shift_reg_5_ce0;
wire   [31:0] shift_reg_5_q0;
wire   [2:0] shift_reg_5_address1;
reg    shift_reg_5_ce1;
reg    shift_reg_5_we1;
wire   [2:0] shift_reg_6_address0;
reg    shift_reg_6_ce0;
wire   [31:0] shift_reg_6_q0;
wire   [2:0] shift_reg_6_address1;
reg    shift_reg_6_ce1;
reg    shift_reg_6_we1;
wire   [2:0] shift_reg_7_address0;
reg    shift_reg_7_ce0;
wire   [31:0] shift_reg_7_q0;
wire   [2:0] shift_reg_7_address1;
reg    shift_reg_7_ce1;
reg    shift_reg_7_we1;
wire   [2:0] shift_reg_8_address0;
reg    shift_reg_8_ce0;
wire   [31:0] shift_reg_8_q0;
wire   [2:0] shift_reg_8_address1;
reg    shift_reg_8_ce1;
reg    shift_reg_8_we1;
wire   [2:0] shift_reg_9_address0;
reg    shift_reg_9_ce0;
wire   [31:0] shift_reg_9_q0;
wire   [2:0] shift_reg_9_address1;
reg    shift_reg_9_ce1;
reg    shift_reg_9_we1;
wire   [2:0] shift_reg_10_address0;
reg    shift_reg_10_ce0;
wire   [31:0] shift_reg_10_q0;
wire   [2:0] shift_reg_10_address1;
reg    shift_reg_10_ce1;
reg    shift_reg_10_we1;
wire   [2:0] shift_reg_11_address0;
reg    shift_reg_11_ce0;
wire   [31:0] shift_reg_11_q0;
wire   [2:0] shift_reg_11_address1;
reg    shift_reg_11_ce1;
reg    shift_reg_11_we1;
wire   [2:0] shift_reg_12_address0;
reg    shift_reg_12_ce0;
wire   [31:0] shift_reg_12_q0;
wire   [2:0] shift_reg_12_address1;
reg    shift_reg_12_ce1;
reg    shift_reg_12_we1;
wire   [2:0] shift_reg_13_address0;
reg    shift_reg_13_ce0;
wire   [31:0] shift_reg_13_q0;
wire   [2:0] shift_reg_13_address1;
reg    shift_reg_13_ce1;
reg    shift_reg_13_we1;
wire   [2:0] shift_reg_14_address0;
reg    shift_reg_14_ce0;
wire   [31:0] shift_reg_14_q0;
wire   [2:0] shift_reg_14_address1;
reg    shift_reg_14_ce1;
reg    shift_reg_14_we1;
wire   [2:0] shift_reg_15_address0;
reg    shift_reg_15_ce0;
wire   [31:0] shift_reg_15_q0;
wire   [2:0] shift_reg_15_address1;
reg    shift_reg_15_ce1;
reg    shift_reg_15_we1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln29_reg_721;
reg   [0:0] icmp_ln29_reg_721_pp0_iter1_reg;
reg   [0:0] icmp_ln29_reg_721_pp0_iter2_reg;
wire   [2:0] trunc_ln29_fu_560_p1;
reg   [2:0] trunc_ln29_reg_725;
reg   [2:0] trunc_ln29_reg_725_pp0_iter1_reg;
reg   [3:0] lshr_ln_reg_730;
reg   [3:0] trunc_ln1_reg_815;
reg   [3:0] trunc_ln1_reg_815_pp0_iter1_reg;
wire  signed [31:0] i_op_assign_fu_624_p18;
reg   [31:0] i_op_assign_reg_824;
reg  signed [4:0] c_load_reg_845;
wire   [31:0] grp_fu_684_p2;
reg   [31:0] mul_ln33_reg_855;
wire   [63:0] zext_ln32_fu_586_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln29_fu_555_p1;
wire   [63:0] zext_ln32_1_fu_662_p1;
reg   [31:0] acc_fu_108;
wire   [31:0] acc_1_fu_692_p2;
wire    ap_loop_init;
reg   [6:0] i_fu_112;
reg   [6:0] ap_sig_allocacmp_i_1;
wire   [6:0] add_ln29_fu_564_p2;
wire    ap_block_pp0_stage0_01001;
wire   [2:0] add_ln32_fu_580_p2;
wire   [63:0] i_op_assign_fu_624_p17;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fir_fir_Pipeline_VITIS_LOOP_29_1_c #(
    .DataWidth( 5 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_1_address0),
    .ce0(shift_reg_1_ce0),
    .q0(shift_reg_1_q0),
    .address1(shift_reg_1_address1),
    .ce1(shift_reg_1_ce1),
    .we1(shift_reg_1_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_2_address0),
    .ce0(shift_reg_2_ce0),
    .q0(shift_reg_2_q0),
    .address1(shift_reg_2_address1),
    .ce1(shift_reg_2_ce1),
    .we1(shift_reg_2_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_3_address0),
    .ce0(shift_reg_3_ce0),
    .q0(shift_reg_3_q0),
    .address1(shift_reg_3_address1),
    .ce1(shift_reg_3_ce1),
    .we1(shift_reg_3_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_4_address0),
    .ce0(shift_reg_4_ce0),
    .q0(shift_reg_4_q0),
    .address1(shift_reg_4_address1),
    .ce1(shift_reg_4_ce1),
    .we1(shift_reg_4_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_5_address0),
    .ce0(shift_reg_5_ce0),
    .q0(shift_reg_5_q0),
    .address1(shift_reg_5_address1),
    .ce1(shift_reg_5_ce1),
    .we1(shift_reg_5_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_6_address0),
    .ce0(shift_reg_6_ce0),
    .q0(shift_reg_6_q0),
    .address1(shift_reg_6_address1),
    .ce1(shift_reg_6_ce1),
    .we1(shift_reg_6_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_7_address0),
    .ce0(shift_reg_7_ce0),
    .q0(shift_reg_7_q0),
    .address1(shift_reg_7_address1),
    .ce1(shift_reg_7_ce1),
    .we1(shift_reg_7_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_8_address0),
    .ce0(shift_reg_8_ce0),
    .q0(shift_reg_8_q0),
    .address1(shift_reg_8_address1),
    .ce1(shift_reg_8_ce1),
    .we1(shift_reg_8_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_9_address0),
    .ce0(shift_reg_9_ce0),
    .q0(shift_reg_9_q0),
    .address1(shift_reg_9_address1),
    .ce1(shift_reg_9_ce1),
    .we1(shift_reg_9_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_10_address0),
    .ce0(shift_reg_10_ce0),
    .q0(shift_reg_10_q0),
    .address1(shift_reg_10_address1),
    .ce1(shift_reg_10_ce1),
    .we1(shift_reg_10_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_11_address0),
    .ce0(shift_reg_11_ce0),
    .q0(shift_reg_11_q0),
    .address1(shift_reg_11_address1),
    .ce1(shift_reg_11_ce1),
    .we1(shift_reg_11_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_12_address0),
    .ce0(shift_reg_12_ce0),
    .q0(shift_reg_12_q0),
    .address1(shift_reg_12_address1),
    .ce1(shift_reg_12_ce1),
    .we1(shift_reg_12_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_13_address0),
    .ce0(shift_reg_13_ce0),
    .q0(shift_reg_13_q0),
    .address1(shift_reg_13_address1),
    .ce1(shift_reg_13_ce1),
    .we1(shift_reg_13_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_14_address0),
    .ce0(shift_reg_14_ce0),
    .q0(shift_reg_14_q0),
    .address1(shift_reg_14_address1),
    .ce1(shift_reg_14_ce1),
    .we1(shift_reg_14_we1),
    .d1(i_op_assign_reg_824)
);

fir_fir_Pipeline_VITIS_LOOP_29_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
shift_reg_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_15_address0),
    .ce0(shift_reg_15_ce0),
    .q0(shift_reg_15_q0),
    .address1(shift_reg_15_address1),
    .ce1(shift_reg_15_ce1),
    .we1(shift_reg_15_we1),
    .d1(i_op_assign_reg_824)
);

fir_mux_1664_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1664_32_1_1_U1(
    .din0(shift_reg_0_q0),
    .din1(shift_reg_1_q0),
    .din2(shift_reg_2_q0),
    .din3(shift_reg_3_q0),
    .din4(shift_reg_4_q0),
    .din5(shift_reg_5_q0),
    .din6(shift_reg_6_q0),
    .din7(shift_reg_7_q0),
    .din8(shift_reg_8_q0),
    .din9(shift_reg_9_q0),
    .din10(shift_reg_10_q0),
    .din11(shift_reg_11_q0),
    .din12(shift_reg_12_q0),
    .din13(shift_reg_13_q0),
    .din14(shift_reg_14_q0),
    .din15(shift_reg_15_q0),
    .din16(i_op_assign_fu_624_p17),
    .dout(i_op_assign_fu_624_p18)
);

fir_mul_32s_5s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(i_op_assign_reg_824),
    .din1(c_load_reg_845),
    .ce(1'b1),
    .dout(grp_fu_684_p2)
);

fir_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            acc_fu_108 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            acc_fu_108 <= acc_1_fu_692_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln29_fu_549_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_112 <= add_ln29_fu_564_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_112 <= 7'd127;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        c_load_reg_845 <= c_q0;
        i_op_assign_reg_824 <= i_op_assign_fu_624_p18;
        icmp_ln29_reg_721 <= icmp_ln29_fu_549_p2;
        icmp_ln29_reg_721_pp0_iter1_reg <= icmp_ln29_reg_721;
        trunc_ln1_reg_815_pp0_iter1_reg <= trunc_ln1_reg_815;
        trunc_ln29_reg_725_pp0_iter1_reg <= trunc_ln29_reg_725;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln29_reg_721_pp0_iter2_reg <= icmp_ln29_reg_721_pp0_iter1_reg;
        mul_ln33_reg_855 <= grp_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_549_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_730 <= {{add_ln29_fu_564_p2[6:3]}};
        trunc_ln1_reg_815 <= {{ap_sig_allocacmp_i_1[6:3]}};
        trunc_ln29_reg_725 <= trunc_ln29_fu_560_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_reg_721_pp0_iter2_reg == 1'd1))) begin
        acc_out_ap_vld = 1'b1;
    end else begin
        acc_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_549_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 7'd127;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_0_ce0 = 1'b1;
    end else begin
        shift_reg_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_0_ce1 = 1'b1;
    end else begin
        shift_reg_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_0_we1 = 1'b1;
    end else begin
        shift_reg_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_10_ce0 = 1'b1;
    end else begin
        shift_reg_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_10_ce1 = 1'b1;
    end else begin
        shift_reg_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd10) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_10_we1 = 1'b1;
    end else begin
        shift_reg_10_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_11_ce0 = 1'b1;
    end else begin
        shift_reg_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_11_ce1 = 1'b1;
    end else begin
        shift_reg_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd11) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_11_we1 = 1'b1;
    end else begin
        shift_reg_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_12_ce0 = 1'b1;
    end else begin
        shift_reg_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_12_ce1 = 1'b1;
    end else begin
        shift_reg_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd12) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_12_we1 = 1'b1;
    end else begin
        shift_reg_12_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_13_ce0 = 1'b1;
    end else begin
        shift_reg_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_13_ce1 = 1'b1;
    end else begin
        shift_reg_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd13) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_13_we1 = 1'b1;
    end else begin
        shift_reg_13_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_14_ce0 = 1'b1;
    end else begin
        shift_reg_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_14_ce1 = 1'b1;
    end else begin
        shift_reg_14_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd14) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_14_we1 = 1'b1;
    end else begin
        shift_reg_14_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_15_ce0 = 1'b1;
    end else begin
        shift_reg_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_15_ce1 = 1'b1;
    end else begin
        shift_reg_15_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd15) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_15_we1 = 1'b1;
    end else begin
        shift_reg_15_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_1_ce0 = 1'b1;
    end else begin
        shift_reg_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_1_ce1 = 1'b1;
    end else begin
        shift_reg_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_1_we1 = 1'b1;
    end else begin
        shift_reg_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_2_ce0 = 1'b1;
    end else begin
        shift_reg_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_2_ce1 = 1'b1;
    end else begin
        shift_reg_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_2_we1 = 1'b1;
    end else begin
        shift_reg_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_3_ce0 = 1'b1;
    end else begin
        shift_reg_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_3_ce1 = 1'b1;
    end else begin
        shift_reg_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_3_we1 = 1'b1;
    end else begin
        shift_reg_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_4_ce0 = 1'b1;
    end else begin
        shift_reg_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_4_ce1 = 1'b1;
    end else begin
        shift_reg_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_4_we1 = 1'b1;
    end else begin
        shift_reg_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_5_ce0 = 1'b1;
    end else begin
        shift_reg_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_5_ce1 = 1'b1;
    end else begin
        shift_reg_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd5) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_5_we1 = 1'b1;
    end else begin
        shift_reg_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_6_ce0 = 1'b1;
    end else begin
        shift_reg_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_6_ce1 = 1'b1;
    end else begin
        shift_reg_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd6) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_6_we1 = 1'b1;
    end else begin
        shift_reg_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_7_ce0 = 1'b1;
    end else begin
        shift_reg_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_7_ce1 = 1'b1;
    end else begin
        shift_reg_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd7) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_7_we1 = 1'b1;
    end else begin
        shift_reg_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_8_ce0 = 1'b1;
    end else begin
        shift_reg_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_8_ce1 = 1'b1;
    end else begin
        shift_reg_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd8) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_8_we1 = 1'b1;
    end else begin
        shift_reg_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_9_ce0 = 1'b1;
    end else begin
        shift_reg_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_9_ce1 = 1'b1;
    end else begin
        shift_reg_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1_reg_815_pp0_iter1_reg == 4'd9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        shift_reg_9_we1 = 1'b1;
    end else begin
        shift_reg_9_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_692_p2 = (mul_ln33_reg_855 + acc_fu_108);

assign acc_out = acc_fu_108;

assign add_ln29_fu_564_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(7'd127));

assign add_ln32_fu_580_p2 = ($signed(trunc_ln29_fu_560_p1) + $signed(3'd7));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign c_address0 = zext_ln29_fu_555_p1;

assign i_op_assign_fu_624_p17 = lshr_ln_reg_730;

assign icmp_ln29_fu_549_p2 = ((ap_sig_allocacmp_i_1 == 7'd0) ? 1'b1 : 1'b0);

assign shift_reg_0_address0 = zext_ln32_fu_586_p1;

assign shift_reg_0_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_0_d1 = i_op_assign_reg_824;

assign shift_reg_10_address0 = zext_ln32_fu_586_p1;

assign shift_reg_10_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_11_address0 = zext_ln32_fu_586_p1;

assign shift_reg_11_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_12_address0 = zext_ln32_fu_586_p1;

assign shift_reg_12_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_13_address0 = zext_ln32_fu_586_p1;

assign shift_reg_13_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_14_address0 = zext_ln32_fu_586_p1;

assign shift_reg_14_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_15_address0 = zext_ln32_fu_586_p1;

assign shift_reg_15_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_1_address0 = zext_ln32_fu_586_p1;

assign shift_reg_1_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_2_address0 = zext_ln32_fu_586_p1;

assign shift_reg_2_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_3_address0 = zext_ln32_fu_586_p1;

assign shift_reg_3_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_4_address0 = zext_ln32_fu_586_p1;

assign shift_reg_4_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_5_address0 = zext_ln32_fu_586_p1;

assign shift_reg_5_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_6_address0 = zext_ln32_fu_586_p1;

assign shift_reg_6_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_7_address0 = zext_ln32_fu_586_p1;

assign shift_reg_7_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_8_address0 = zext_ln32_fu_586_p1;

assign shift_reg_8_address1 = zext_ln32_1_fu_662_p1;

assign shift_reg_9_address0 = zext_ln32_fu_586_p1;

assign shift_reg_9_address1 = zext_ln32_1_fu_662_p1;

assign trunc_ln29_fu_560_p1 = ap_sig_allocacmp_i_1[2:0];

assign zext_ln29_fu_555_p1 = ap_sig_allocacmp_i_1;

assign zext_ln32_1_fu_662_p1 = trunc_ln29_reg_725_pp0_iter1_reg;

assign zext_ln32_fu_586_p1 = add_ln32_fu_580_p2;

endmodule //fir_fir_Pipeline_VITIS_LOOP_29_1
