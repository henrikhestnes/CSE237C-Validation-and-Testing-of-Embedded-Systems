// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir_fir_Pipeline_VITIS_LOOP_35_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        acc_1_0_out,
        acc_1_0_out_ap_vld,
        add_ln38_6_out,
        add_ln38_6_out_ap_vld,
        add_ln38_5_out,
        add_ln38_5_out_ap_vld,
        add_ln38_4_out,
        add_ln38_4_out_ap_vld,
        add_ln38_3_out,
        add_ln38_3_out_ap_vld,
        add_ln38_2_out,
        add_ln38_2_out_ap_vld,
        add_ln38_1_out,
        add_ln38_1_out_ap_vld,
        add_ln38_out,
        add_ln38_out_ap_vld,
        shift_reg_address0,
        shift_reg_ce0,
        shift_reg_q0,
        shift_reg_address1,
        shift_reg_ce1,
        shift_reg_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_pp0_stage1 = 11'd4;
parameter    ap_ST_fsm_pp0_stage2 = 11'd8;
parameter    ap_ST_fsm_pp0_stage3 = 11'd16;
parameter    ap_ST_fsm_state8 = 11'd32;
parameter    ap_ST_fsm_state9 = 11'd64;
parameter    ap_ST_fsm_state10 = 11'd128;
parameter    ap_ST_fsm_state11 = 11'd256;
parameter    ap_ST_fsm_state12 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] acc_1_0_out;
output   acc_1_0_out_ap_vld;
output  [31:0] add_ln38_6_out;
output   add_ln38_6_out_ap_vld;
output  [31:0] add_ln38_5_out;
output   add_ln38_5_out_ap_vld;
output  [31:0] add_ln38_4_out;
output   add_ln38_4_out_ap_vld;
output  [31:0] add_ln38_3_out;
output   add_ln38_3_out_ap_vld;
output  [31:0] add_ln38_2_out;
output   add_ln38_2_out_ap_vld;
output  [31:0] add_ln38_1_out;
output   add_ln38_1_out_ap_vld;
output  [31:0] add_ln38_out;
output   add_ln38_out_ap_vld;
output  [6:0] shift_reg_address0;
output   shift_reg_ce0;
input  [31:0] shift_reg_q0;
output  [6:0] shift_reg_address1;
output   shift_reg_ce1;
input  [31:0] shift_reg_q1;
output  [2:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] acc_1_0_out;
reg acc_1_0_out_ap_vld;
reg add_ln38_6_out_ap_vld;
reg add_ln38_5_out_ap_vld;
reg add_ln38_4_out_ap_vld;
reg add_ln38_3_out_ap_vld;
reg add_ln38_2_out_ap_vld;
reg add_ln38_1_out_ap_vld;
reg add_ln38_out_ap_vld;
reg[6:0] shift_reg_address0;
reg shift_reg_ce0;
reg[6:0] shift_reg_address1;
reg shift_reg_ce1;
reg[2:0] ap_return;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] c_address0;
reg    c_ce0;
wire  signed [4:0] c_q0;
reg   [6:0] c_address1;
reg    c_ce1;
wire  signed [4:0] c_q1;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln1065_reg_645;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln1065_1_reg_659;
reg   [0:0] icmp_ln1065_2_reg_683;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] icmp_ln1065_3_reg_697;
reg   [0:0] icmp_ln1065_4_reg_731;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1065_5_reg_745;
reg   [0:0] icmp_ln1065_6_reg_795;
reg   [0:0] icmp_ln1065_7_reg_809;
reg   [6:0] i_V_2_0_load_reg_634;
wire   [0:0] icmp_ln1065_fu_353_p2;
reg   [0:0] icmp_ln1065_reg_645_pp0_iter1_reg;
wire   [0:0] icmp_ln1065_1_fu_371_p2;
reg   [0:0] icmp_ln1065_1_reg_659_pp0_iter1_reg;
wire   [0:0] icmp_ln1065_2_fu_408_p2;
wire   [0:0] icmp_ln1065_3_fu_425_p2;
wire   [31:0] grp_fu_387_p2;
reg   [31:0] mul_ln38_reg_711;
wire   [31:0] grp_fu_397_p2;
reg   [31:0] mul_ln38_1_reg_716;
wire   [0:0] icmp_ln1065_4_fu_462_p2;
wire   [0:0] icmp_ln1065_5_fu_479_p2;
reg   [31:0] acc_1_0_load_reg_759;
wire   [31:0] add_ln38_fu_491_p2;
reg   [31:0] add_ln38_reg_764;
wire   [31:0] add_ln38_1_fu_496_p2;
reg   [31:0] add_ln38_1_reg_769;
wire   [31:0] grp_fu_441_p2;
reg   [31:0] mul_ln38_2_reg_775;
wire   [31:0] grp_fu_451_p2;
reg   [31:0] mul_ln38_3_reg_780;
wire   [0:0] icmp_ln1065_6_fu_526_p2;
wire   [0:0] icmp_ln1065_7_fu_543_p2;
wire   [31:0] add_ln38_2_fu_565_p2;
reg   [31:0] add_ln38_2_reg_823;
wire   [31:0] add_ln38_3_fu_569_p2;
reg   [31:0] add_ln38_3_reg_828;
wire   [31:0] grp_fu_505_p2;
reg   [31:0] mul_ln38_4_reg_834;
wire   [31:0] grp_fu_515_p2;
reg   [31:0] mul_ln38_5_reg_839;
wire   [31:0] add_ln38_4_fu_594_p2;
reg   [31:0] add_ln38_4_reg_854;
wire   [31:0] add_ln38_5_fu_598_p2;
reg   [31:0] add_ln38_5_reg_859;
wire   [31:0] add_ln38_6_fu_603_p2;
reg   [31:0] add_ln38_6_reg_864;
wire    ap_block_pp0_stage3_subdone;
reg    ap_predicate_tran7to8_state5;
reg    ap_predicate_tran7to9_state5;
reg    ap_predicate_tran7to10_state5;
reg    ap_predicate_tran7to11_state5;
reg    ap_predicate_tran7to12_state5;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage1_subdone;
reg   [2:0] ap_phi_mux_UnifiedRetVal_phi_fu_302_p16;
reg   [2:0] UnifiedRetVal_reg_294;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln573_fu_359_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln573_1_fu_377_p1;
wire   [63:0] zext_ln573_2_fu_414_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln573_3_fu_431_p1;
wire   [63:0] zext_ln573_4_fu_468_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln573_5_fu_485_p1;
wire   [63:0] zext_ln573_6_fu_532_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln573_7_fu_549_p1;
reg   [6:0] i_V_2_0_fu_84;
wire   [6:0] add_ln871_7_fu_555_p2;
reg   [31:0] acc_1_0_fu_88;
wire   [31:0] add_ln38_7_fu_609_p2;
wire   [6:0] add_ln871_fu_365_p2;
wire   [6:0] add_ln871_1_fu_403_p2;
wire   [6:0] add_ln871_2_fu_420_p2;
wire   [6:0] add_ln871_3_fu_457_p2;
wire   [6:0] add_ln871_4_fu_474_p2;
wire   [6:0] add_ln871_5_fu_521_p2;
wire   [6:0] add_ln871_6_fu_538_p2;
wire   [31:0] grp_fu_578_p2;
wire   [31:0] grp_fu_588_p2;
reg   [2:0] ap_return_preg;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_block_pp0_stage0_subdone;
reg   [5:0] ap_exit_tran_regpp0;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_705;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 3'd0;
end

fir_fir_Pipeline_VITIS_LOOP_35_2_c #(
    .DataWidth( 5 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0),
    .address1(c_address1),
    .ce1(c_ce1),
    .q1(c_q1)
);

fir_mul_32s_5s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_reg_q1),
    .din1(c_q1),
    .ce(1'b1),
    .dout(grp_fu_387_p2)
);

fir_mul_32s_5s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_reg_q0),
    .din1(c_q0),
    .ce(1'b1),
    .dout(grp_fu_397_p2)
);

fir_mul_32s_5s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_reg_q1),
    .din1(c_q1),
    .ce(1'b1),
    .dout(grp_fu_441_p2)
);

fir_mul_32s_5s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_reg_q0),
    .din1(c_q0),
    .ce(1'b1),
    .dout(grp_fu_451_p2)
);

fir_mul_32s_5s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_reg_q1),
    .din1(c_q1),
    .ce(1'b1),
    .dout(grp_fu_505_p2)
);

fir_mul_32s_5s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_reg_q0),
    .din1(c_q0),
    .ce(1'b1),
    .dout(grp_fu_515_p2)
);

fir_mul_32s_5s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_reg_q1),
    .din1(c_q1),
    .ce(1'b1),
    .dout(grp_fu_578_p2)
);

fir_mul_32s_5s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shift_reg_q0),
    .din1(c_q0),
    .ce(1'b1),
    .dout(grp_fu_588_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 3'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_302_p16;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        UnifiedRetVal_reg_294 <= 3'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        UnifiedRetVal_reg_294 <= 3'd6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        UnifiedRetVal_reg_294 <= 3'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        UnifiedRetVal_reg_294 <= 3'd4;
    end else if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_5_reg_745 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        UnifiedRetVal_reg_294 <= 3'd3;
    end else if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        UnifiedRetVal_reg_294 <= 3'd2;
    end else if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        UnifiedRetVal_reg_294 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        UnifiedRetVal_reg_294 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        acc_1_0_fu_88 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1065_1_reg_659_pp0_iter1_reg == 1'd0) & (icmp_ln1065_reg_645_pp0_iter1_reg == 1'd0) & (icmp_ln1065_7_reg_809 == 1'd0) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        acc_1_0_fu_88 <= add_ln38_7_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if ((icmp_ln1065_reg_645 == 1'd1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b0;
            ap_exit_tran_regpp0[2] <= 1'b1;
        end else if ((ap_predicate_tran7to12_state5 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b0;
            ap_exit_tran_regpp0[2] <= 1'b1;
        end else if ((ap_predicate_tran7to11_state5 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b1;
            ap_exit_tran_regpp0[2] <= 1'b0;
        end else if ((ap_predicate_tran7to10_state5 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b1;
            ap_exit_tran_regpp0[2] <= 1'b0;
        end else if ((ap_predicate_tran7to9_state5 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b0;
            ap_exit_tran_regpp0[2] <= 1'b0;
        end else if ((ap_predicate_tran7to8_state5 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b0;
            ap_exit_tran_regpp0[2] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_V_2_0_fu_84 <= 7'd127;
    end else if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1065_7_fu_543_p2 == 1'd0) & (icmp_ln1065_6_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        i_V_2_0_fu_84 <= add_ln871_7_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        acc_1_0_load_reg_759 <= acc_1_0_fu_88;
        add_ln38_reg_764 <= add_ln38_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln38_1_reg_769 <= add_ln38_1_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        add_ln38_2_reg_823 <= add_ln38_2_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        add_ln38_3_reg_828 <= add_ln38_3_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1065_1_reg_659_pp0_iter1_reg == 1'd0) & (icmp_ln1065_reg_645_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        add_ln38_4_reg_854 <= add_ln38_4_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1065_1_reg_659_pp0_iter1_reg == 1'd0) & (icmp_ln1065_reg_645_pp0_iter1_reg == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        add_ln38_5_reg_859 <= add_ln38_5_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1065_1_reg_659_pp0_iter1_reg == 1'd0) & (icmp_ln1065_reg_645_pp0_iter1_reg == 1'd0) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        add_ln38_6_reg_864 <= add_ln38_6_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_V_2_0_load_reg_634 <= i_V_2_0_fu_84;
        icmp_ln1065_1_reg_659_pp0_iter1_reg <= icmp_ln1065_1_reg_659;
        icmp_ln1065_reg_645_pp0_iter1_reg <= icmp_ln1065_reg_645;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1065_fu_353_p2 == 1'd0))) begin
        icmp_ln1065_1_reg_659 <= icmp_ln1065_1_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln1065_2_reg_683 <= icmp_ln1065_2_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1065_2_fu_408_p2 == 1'd0))) begin
        icmp_ln1065_3_reg_697 <= icmp_ln1065_3_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        icmp_ln1065_4_reg_731 <= icmp_ln1065_4_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1065_4_fu_462_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        icmp_ln1065_5_reg_745 <= icmp_ln1065_5_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        icmp_ln1065_6_reg_795 <= icmp_ln1065_6_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln1065_6_fu_526_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        icmp_ln1065_7_reg_809 <= icmp_ln1065_7_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1065_reg_645 <= icmp_ln1065_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_ln38_1_reg_716 <= grp_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        mul_ln38_2_reg_775 <= grp_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        mul_ln38_3_reg_780 <= grp_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        mul_ln38_4_reg_834 <= grp_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        mul_ln38_5_reg_839 <= grp_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_ln38_reg_711 <= grp_fu_387_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_1_0_out = acc_1_0_load_reg_759;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_5_reg_745 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)))) begin
        acc_1_0_out = acc_1_0_fu_88;
    end else begin
        acc_1_0_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_5_reg_745 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)))) begin
        acc_1_0_out_ap_vld = 1'b1;
    end else begin
        acc_1_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_5_reg_745 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)))) begin
        add_ln38_1_out_ap_vld = 1'b1;
    end else begin
        add_ln38_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_5_reg_745 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)))) begin
        add_ln38_2_out_ap_vld = 1'b1;
    end else begin
        add_ln38_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_5_reg_745 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)))) begin
        add_ln38_3_out_ap_vld = 1'b1;
    end else begin
        add_ln38_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_5_reg_745 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)))) begin
        add_ln38_4_out_ap_vld = 1'b1;
    end else begin
        add_ln38_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)))) begin
        add_ln38_5_out_ap_vld = 1'b1;
    end else begin
        add_ln38_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) begin
        add_ln38_6_out_ap_vld = 1'b1;
    end else begin
        add_ln38_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_5_reg_745 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)))) begin
        add_ln38_out_ap_vld = 1'b1;
    end else begin
        add_ln38_out_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3) & ((icmp_ln1065_reg_645 == 1'd1) | (ap_predicate_tran7to12_state5 == 1'b1) | (ap_predicate_tran7to11_state5 == 1'b1) | (ap_predicate_tran7to10_state5 == 1'b1) | (ap_predicate_tran7to9_state5 == 1'b1) | (ap_predicate_tran7to8_state5 == 1'b1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_705)) begin
        if ((icmp_ln1065_5_reg_745 == 1'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_302_p16 = 3'd3;
        end else if (((icmp_ln1065_6_reg_795 == 1'd1) & (icmp_ln1065_5_reg_745 == 1'd0))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_302_p16 = 3'd2;
        end else if (((icmp_ln1065_6_reg_795 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd0))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_302_p16 = 3'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_302_p16 = UnifiedRetVal_reg_294;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_302_p16 = UnifiedRetVal_reg_294;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_302_p16;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            c_address0 = zext_ln573_7_fu_549_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            c_address0 = zext_ln573_5_fu_485_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            c_address0 = zext_ln573_3_fu_431_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c_address0 = zext_ln573_1_fu_377_p1;
        end else begin
            c_address0 = 'bx;
        end
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            c_address1 = zext_ln573_6_fu_532_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            c_address1 = zext_ln573_4_fu_468_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            c_address1 = zext_ln573_2_fu_414_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c_address1 = zext_ln573_fu_359_p1;
        end else begin
            c_address1 = 'bx;
        end
    end else begin
        c_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        c_ce1 = 1'b1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            shift_reg_address0 = zext_ln573_7_fu_549_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            shift_reg_address0 = zext_ln573_5_fu_485_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            shift_reg_address0 = zext_ln573_3_fu_431_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            shift_reg_address0 = zext_ln573_1_fu_377_p1;
        end else begin
            shift_reg_address0 = 'bx;
        end
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            shift_reg_address1 = zext_ln573_6_fu_532_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            shift_reg_address1 = zext_ln573_4_fu_468_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            shift_reg_address1 = zext_ln573_2_fu_414_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            shift_reg_address1 = zext_ln573_fu_359_p1;
        end else begin
            shift_reg_address1 = 'bx;
        end
    end else begin
        shift_reg_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        shift_reg_ce1 = 1'b1;
    end else begin
        shift_reg_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 6'd5) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 6'd4) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 6'd3) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 6'd2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 6'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 6'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln38_1_fu_496_p2 = (mul_ln38_1_reg_716 + add_ln38_fu_491_p2);

assign add_ln38_1_out = add_ln38_1_reg_769;

assign add_ln38_2_fu_565_p2 = (mul_ln38_2_reg_775 + add_ln38_1_reg_769);

assign add_ln38_2_out = add_ln38_2_reg_823;

assign add_ln38_3_fu_569_p2 = (mul_ln38_3_reg_780 + add_ln38_2_fu_565_p2);

assign add_ln38_3_out = add_ln38_3_reg_828;

assign add_ln38_4_fu_594_p2 = (mul_ln38_4_reg_834 + add_ln38_3_reg_828);

assign add_ln38_4_out = add_ln38_4_reg_854;

assign add_ln38_5_fu_598_p2 = (mul_ln38_5_reg_839 + add_ln38_4_fu_594_p2);

assign add_ln38_5_out = add_ln38_5_reg_859;

assign add_ln38_6_fu_603_p2 = (grp_fu_578_p2 + add_ln38_5_fu_598_p2);

assign add_ln38_6_out = add_ln38_6_reg_864;

assign add_ln38_7_fu_609_p2 = (grp_fu_588_p2 + add_ln38_6_fu_603_p2);

assign add_ln38_fu_491_p2 = (mul_ln38_reg_711 + acc_1_0_fu_88);

assign add_ln38_out = add_ln38_reg_764;

assign add_ln871_1_fu_403_p2 = ($signed(i_V_2_0_load_reg_634) + $signed(7'd126));

assign add_ln871_2_fu_420_p2 = ($signed(i_V_2_0_load_reg_634) + $signed(7'd125));

assign add_ln871_3_fu_457_p2 = ($signed(i_V_2_0_load_reg_634) + $signed(7'd124));

assign add_ln871_4_fu_474_p2 = ($signed(i_V_2_0_load_reg_634) + $signed(7'd123));

assign add_ln871_5_fu_521_p2 = ($signed(i_V_2_0_load_reg_634) + $signed(7'd122));

assign add_ln871_6_fu_538_p2 = ($signed(i_V_2_0_load_reg_634) + $signed(7'd121));

assign add_ln871_7_fu_555_p2 = ($signed(i_V_2_0_load_reg_634) + $signed(7'd120));

assign add_ln871_fu_365_p2 = ($signed(i_V_2_0_fu_84) + $signed(7'd127));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_705 = ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran7to10_state5 = ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd1) & (icmp_ln1065_2_reg_683 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran7to11_state5 = ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd1));
end

always @ (*) begin
    ap_predicate_tran7to12_state5 = ((icmp_ln1065_1_reg_659 == 1'd1) & (icmp_ln1065_reg_645 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran7to8_state5 = ((((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (icmp_ln1065_6_fu_526_p2 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (icmp_ln1065_7_fu_543_p2 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0))) | ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (icmp_ln1065_5_reg_745 == 1'd1) & (icmp_ln1065_4_reg_731 == 1'd0) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0)));
end

always @ (*) begin
    ap_predicate_tran7to9_state5 = ((icmp_ln1065_1_reg_659 == 1'd0) & (icmp_ln1065_reg_645 == 1'd0) & (icmp_ln1065_4_reg_731 == 1'd1) & (icmp_ln1065_3_reg_697 == 1'd0) & (icmp_ln1065_2_reg_683 == 1'd0));
end

assign icmp_ln1065_1_fu_371_p2 = ((add_ln871_fu_365_p2 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_2_fu_408_p2 = ((add_ln871_1_fu_403_p2 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_3_fu_425_p2 = ((add_ln871_2_fu_420_p2 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_4_fu_462_p2 = ((add_ln871_3_fu_457_p2 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_5_fu_479_p2 = ((add_ln871_4_fu_474_p2 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_6_fu_526_p2 = ((add_ln871_5_fu_521_p2 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_7_fu_543_p2 = ((add_ln871_6_fu_538_p2 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_353_p2 = ((i_V_2_0_fu_84 == 7'd0) ? 1'b1 : 1'b0);

assign zext_ln573_1_fu_377_p1 = add_ln871_fu_365_p2;

assign zext_ln573_2_fu_414_p1 = add_ln871_1_fu_403_p2;

assign zext_ln573_3_fu_431_p1 = add_ln871_2_fu_420_p2;

assign zext_ln573_4_fu_468_p1 = add_ln871_3_fu_457_p2;

assign zext_ln573_5_fu_485_p1 = add_ln871_4_fu_474_p2;

assign zext_ln573_6_fu_532_p1 = add_ln871_5_fu_521_p2;

assign zext_ln573_7_fu_549_p1 = add_ln871_6_fu_538_p2;

assign zext_ln573_fu_359_p1 = i_V_2_0_fu_84;

always @ (posedge ap_clk) begin
    ap_exit_tran_regpp0[5:3] <= 3'b000;
end

endmodule //fir_fir_Pipeline_VITIS_LOOP_35_2
