// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=513,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=379,HLS_SYN_LUT=275,HLS_VERSION=2021_1_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
wire   [6:0] fir_int_int_c_address0;
reg    fir_int_int_c_ce0;
wire   [31:0] fir_int_int_c_q0;
wire   [31:0] mul9_fu_136_p2;
reg   [31:0] mul9_reg_233;
wire   [63:0] zext_ln23_fu_155_p1;
reg   [63:0] zext_ln23_reg_241;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln25_fu_168_p2;
reg   [0:0] icmp_ln25_reg_249;
wire   [0:0] tmp_fu_160_p3;
reg  signed [31:0] shift_reg_load_reg_263;
wire    ap_CS_fsm_state3;
reg  signed [31:0] fir_int_int_c_load_reg_268;
wire   [31:0] grp_fu_189_p2;
reg   [31:0] mul_ln27_reg_273;
wire    ap_CS_fsm_state5;
reg   [31:0] ap_phi_mux_mul_pn_phi_fu_114_p4;
reg   [31:0] mul_pn_reg_111;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln26_fu_184_p1;
reg   [31:0] acc_fu_54;
wire   [31:0] acc_1_fu_193_p2;
reg   [7:0] i_fu_58;
wire   [7:0] add_ln23_fu_199_p2;
wire   [31:0] empty_fu_124_p2;
wire   [31:0] empty_6_fu_130_p2;
wire   [6:0] trunc_ln23_fu_174_p1;
wire   [6:0] add_ln26_fu_178_p2;
wire  signed [5:0] grp_fu_189_p0;
wire    ap_CS_fsm_state4;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_fir_int_int_c #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
fir_int_int_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fir_int_int_c_address0),
    .ce0(fir_int_int_c_ce0),
    .q0(fir_int_int_c_q0)
);

fir_mul_6s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_6s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_189_p0),
    .din1(shift_reg_load_reg_263),
    .ce(1'b1),
    .dout(grp_fu_189_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        acc_fu_54 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        acc_fu_54 <= acc_1_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_58 <= 8'd127;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_fu_58 <= add_ln23_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_160_p3 == 1'd0) & (icmp_ln25_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_pn_reg_111 <= mul9_reg_233;
    end else if (((icmp_ln25_reg_249 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        mul_pn_reg_111 <= mul_ln27_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fir_int_int_c_load_reg_268 <= fir_int_int_c_q0;
        shift_reg_load_reg_263 <= shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_160_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln25_reg_249 <= icmp_ln25_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul9_reg_233[31 : 1] <= mul9_fu_136_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln27_reg_273 <= grp_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln23_reg_241[7 : 0] <= zext_ln23_fu_155_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((tmp_fu_160_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_249 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_mul_pn_phi_fu_114_p4 = mul_ln27_reg_273;
    end else begin
        ap_phi_mux_mul_pn_phi_fu_114_p4 = mul_pn_reg_111;
    end
end

always @ (*) begin
    if (((tmp_fu_160_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fir_int_int_c_ce0 = 1'b1;
    end else begin
        fir_int_int_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = zext_ln23_reg_241;
    end else if (((tmp_fu_160_p3 == 1'd0) & (icmp_ln25_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = 7'd0;
    end else if (((tmp_fu_160_p3 == 1'd0) & (icmp_ln25_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = zext_ln26_fu_184_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_160_p3 == 1'd0) & (icmp_ln25_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_fu_160_p3 == 1'd0) & (icmp_ln25_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((tmp_fu_160_p3 == 1'd0) & (icmp_ln25_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_d0 = x;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_160_p3 == 1'd0) & (icmp_ln25_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_160_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_160_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((tmp_fu_160_p3 == 1'd0) & (icmp_ln25_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_193_p2 = (ap_phi_mux_mul_pn_phi_fu_114_p4 + acc_fu_54);

assign add_ln23_fu_199_p2 = ($signed(i_fu_58) + $signed(8'd255));

assign add_ln26_fu_178_p2 = ($signed(trunc_ln23_fu_174_p1) + $signed(7'd127));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign empty_6_fu_130_p2 = x << 32'd1;

assign empty_fu_124_p2 = x << 32'd3;

assign fir_int_int_c_address0 = zext_ln23_fu_155_p1;

assign grp_fu_189_p0 = fir_int_int_c_load_reg_268;

assign icmp_ln25_fu_168_p2 = ((i_fu_58 == 8'd0) ? 1'b1 : 1'b0);

assign mul9_fu_136_p2 = (empty_fu_124_p2 + empty_6_fu_130_p2);

assign tmp_fu_160_p3 = i_fu_58[32'd7];

assign trunc_ln23_fu_174_p1 = i_fu_58[6:0];

assign y = acc_fu_54;

assign zext_ln23_fu_155_p1 = i_fu_58;

assign zext_ln26_fu_184_p1 = add_ln26_fu_178_p2;

always @ (posedge ap_clk) begin
    mul9_reg_233[0] <= 1'b0;
    zext_ln23_reg_241[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //fir
