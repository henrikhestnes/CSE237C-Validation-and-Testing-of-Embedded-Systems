-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fir,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=672,HLS_SYN_LUT=367,HLS_VERSION=2021_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_we0 : STD_LOGIC;
    signal shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_66_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_reg_93 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_start : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_done : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_idle : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_ready : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_sum_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_sum_out_ap_vld : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_ce0 : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_we0 : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_ce1 : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_66_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_66_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_fir_Pipeline_VITIS_LOOP_21_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_out_ap_vld : OUT STD_LOGIC;
        shift_reg_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shift_reg_ce0 : OUT STD_LOGIC;
        shift_reg_we0 : OUT STD_LOGIC;
        shift_reg_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shift_reg_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        shift_reg_ce1 : OUT STD_LOGIC;
        shift_reg_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_mul_32s_7ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_shift_reg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    shift_reg_U : component fir_shift_reg
    generic map (
        DataWidth => 32,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        we0 => shift_reg_we0,
        d0 => shift_reg_d0,
        address1 => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_address1,
        ce1 => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_ce1,
        q1 => shift_reg_q1);

    grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57 : component fir_fir_Pipeline_VITIS_LOOP_21_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_start,
        ap_done => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_done,
        ap_idle => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_idle,
        ap_ready => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_ready,
        sum_out => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_sum_out,
        sum_out_ap_vld => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_sum_out_ap_vld,
        shift_reg_address0 => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_address0,
        shift_reg_ce0 => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_ce0,
        shift_reg_we0 => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_we0,
        shift_reg_d0 => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_d0,
        shift_reg_address1 => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_address1,
        shift_reg_ce1 => grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_ce1,
        shift_reg_q1 => shift_reg_q1);

    mul_32s_7ns_32_2_1_U6 : component fir_mul_32s_7ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x,
        din1 => grp_fu_66_p1,
        ce => grp_fu_66_ce,
        dout => grp_fu_66_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_ready = ap_const_logic_1)) then 
                    grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln26_reg_93 <= grp_fu_66_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_done)
    begin
        if ((grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_start <= grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_start_reg;

    grp_fu_66_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_done)
    begin
        if ((((grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_66_ce <= ap_const_logic_1;
        else 
            grp_fu_66_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_66_p1 <= ap_const_lv32_35(7 - 1 downto 0);

    shift_reg_address0_assign_proc : process(ap_CS_fsm_state2, grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_address0 <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_address0 <= grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_address0;
        else 
            shift_reg_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_ce0_assign_proc : process(ap_CS_fsm_state2, grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_ce0 <= grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_ce0;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_d0_assign_proc : process(x, ap_CS_fsm_state2, grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_d0 <= x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_d0 <= grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_d0;
        else 
            shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_we0_assign_proc : process(ap_CS_fsm_state2, grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_we0 <= grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_shift_reg_we0;
        else 
            shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    y <= std_logic_vector(unsigned(grp_fir_Pipeline_VITIS_LOOP_21_1_fu_57_sum_out) + unsigned(mul_ln26_reg_93));

    y_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
