-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fir,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=134,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=113,HLS_SYN_LUT=230,HLS_VERSION=2021_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_reg_V_ce0 : STD_LOGIC;
    signal shift_reg_V_we0 : STD_LOGIC;
    signal shift_reg_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_start : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_done : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_idle : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_ready : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_acc_V_1_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_acc_V_1_out_ap_vld : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_ce0 : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_we0 : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_ce1 : STD_LOGIC;
    signal grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln168_fu_75_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln870_fu_80_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln870_1_fu_92_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln870_1_fu_96_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln870_fu_104_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_84_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_fu_110_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_fir_Pipeline_VITIS_LOOP_25_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        acc_V_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        acc_V_1_out_ap_vld : OUT STD_LOGIC;
        shift_reg_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        shift_reg_V_ce0 : OUT STD_LOGIC;
        shift_reg_V_we0 : OUT STD_LOGIC;
        shift_reg_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        shift_reg_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        shift_reg_V_ce1 : OUT STD_LOGIC;
        shift_reg_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fir_shift_reg_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    shift_reg_V_U : component fir_shift_reg_V
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_V_address0,
        ce0 => shift_reg_V_ce0,
        we0 => shift_reg_V_we0,
        d0 => shift_reg_V_d0,
        address1 => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_address1,
        ce1 => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_ce1,
        q1 => shift_reg_V_q1);

    grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63 : component fir_fir_Pipeline_VITIS_LOOP_25_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_start,
        ap_done => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_done,
        ap_idle => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_idle,
        ap_ready => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_ready,
        acc_V_1_out => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_acc_V_1_out,
        acc_V_1_out_ap_vld => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_acc_V_1_out_ap_vld,
        shift_reg_V_address0 => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_address0,
        shift_reg_V_ce0 => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_ce0,
        shift_reg_V_we0 => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_we0,
        shift_reg_V_d0 => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_d0,
        shift_reg_V_address1 => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_address1,
        shift_reg_V_ce1 => grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_ce1,
        shift_reg_V_q1 => shift_reg_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_ready = ap_const_logic_1)) then 
                    grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    acc_V_fu_110_p2 <= std_logic_vector(unsigned(add_ln870_fu_104_p2) + unsigned(shl_ln_fu_84_p3));
    add_ln870_fu_104_p2 <= std_logic_vector(unsigned(shl_ln870_1_fu_96_p3) + unsigned(grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_acc_V_1_out));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_done)
    begin
        if ((grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_start <= grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_ap_start_reg;

    shift_reg_V_address0_assign_proc : process(grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_address0, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_V_address0 <= ap_const_lv7_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_V_address0 <= grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_address0;
        else 
            shift_reg_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    shift_reg_V_ce0_assign_proc : process(grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_ce0, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_V_ce0 <= grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_ce0;
        else 
            shift_reg_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_V_d0_assign_proc : process(grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_d0, ap_CS_fsm_state2, ap_CS_fsm_state3, trunc_ln168_fu_75_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_V_d0 <= trunc_ln168_fu_75_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_V_d0 <= grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_d0;
        else 
            shift_reg_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    shift_reg_V_we0_assign_proc : process(grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_we0, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_V_we0 <= grp_fir_Pipeline_VITIS_LOOP_25_1_fu_63_shift_reg_V_we0;
        else 
            shift_reg_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln870_1_fu_96_p3 <= (trunc_ln870_1_fu_92_p1 & ap_const_lv1_0);
    shl_ln_fu_84_p3 <= (trunc_ln870_fu_80_p1 & ap_const_lv3_0);
    trunc_ln168_fu_75_p1 <= x(8 - 1 downto 0);
    trunc_ln870_1_fu_92_p1 <= x(15 - 1 downto 0);
    trunc_ln870_fu_80_p1 <= x(13 - 1 downto 0);
        y <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_V_fu_110_p2),32));


    y_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
