// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir_fir_Pipeline_VITIS_LOOP_26_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        acc_out,
        acc_out_ap_vld,
        shift_reg_0_address0,
        shift_reg_0_ce0,
        shift_reg_0_q0,
        shift_reg_0_address1,
        shift_reg_0_ce1,
        shift_reg_0_we1,
        shift_reg_0_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] acc_out;
output   acc_out_ap_vld;
output  [5:0] shift_reg_0_address0;
output   shift_reg_0_ce0;
input  [31:0] shift_reg_0_q0;
output  [5:0] shift_reg_0_address1;
output   shift_reg_0_ce1;
output   shift_reg_0_we1;
output  [31:0] shift_reg_0_d1;

reg ap_idle;
reg acc_out_ap_vld;
reg shift_reg_0_ce0;
reg shift_reg_0_ce1;
reg shift_reg_0_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln26_reg_503;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] shift_reg_1_address0;
reg    shift_reg_1_ce0;
wire   [31:0] shift_reg_1_q0;
wire   [5:0] shift_reg_1_address1;
reg    shift_reg_1_ce1;
reg    shift_reg_1_we1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] i_1_reg_496;
wire   [0:0] icmp_ln26_fu_138_p2;
wire   [31:0] select_ln28_fu_174_p3;
reg  signed [31:0] select_ln28_reg_520;
wire    ap_block_pp0_stage1_11001;
wire  signed [31:0] phi_ln_fu_199_p130;
reg  signed [31:0] phi_ln_reg_525;
wire   [31:0] grp_fu_460_p2;
reg   [31:0] mul_ln29_reg_530;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln28_fu_160_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_1_fu_193_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] acc_fu_60;
wire   [31:0] acc_1_fu_467_p2;
wire    ap_loop_init;
reg   [6:0] i_fu_64;
reg   [6:0] ap_sig_allocacmp_i_1;
wire   [6:0] add_ln26_fu_144_p2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] trunc_ln28_fu_171_p1;
wire   [5:0] lshr_ln_fu_150_p4;
wire   [5:0] lshr_ln28_1_fu_184_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

fir_fir_Pipeline_VITIS_LOOP_26_1_shift_reg_1 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
shift_reg_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_1_address0),
    .ce0(shift_reg_1_ce0),
    .q0(shift_reg_1_q0),
    .address1(shift_reg_1_address1),
    .ce1(shift_reg_1_ce1),
    .we1(shift_reg_1_we1),
    .d1(select_ln28_fu_174_p3)
);

fir_mux_1287_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 32 ),
    .din61_WIDTH( 32 ),
    .din62_WIDTH( 32 ),
    .din63_WIDTH( 32 ),
    .din64_WIDTH( 32 ),
    .din65_WIDTH( 32 ),
    .din66_WIDTH( 32 ),
    .din67_WIDTH( 32 ),
    .din68_WIDTH( 32 ),
    .din69_WIDTH( 32 ),
    .din70_WIDTH( 32 ),
    .din71_WIDTH( 32 ),
    .din72_WIDTH( 32 ),
    .din73_WIDTH( 32 ),
    .din74_WIDTH( 32 ),
    .din75_WIDTH( 32 ),
    .din76_WIDTH( 32 ),
    .din77_WIDTH( 32 ),
    .din78_WIDTH( 32 ),
    .din79_WIDTH( 32 ),
    .din80_WIDTH( 32 ),
    .din81_WIDTH( 32 ),
    .din82_WIDTH( 32 ),
    .din83_WIDTH( 32 ),
    .din84_WIDTH( 32 ),
    .din85_WIDTH( 32 ),
    .din86_WIDTH( 32 ),
    .din87_WIDTH( 32 ),
    .din88_WIDTH( 32 ),
    .din89_WIDTH( 32 ),
    .din90_WIDTH( 32 ),
    .din91_WIDTH( 32 ),
    .din92_WIDTH( 32 ),
    .din93_WIDTH( 32 ),
    .din94_WIDTH( 32 ),
    .din95_WIDTH( 32 ),
    .din96_WIDTH( 32 ),
    .din97_WIDTH( 32 ),
    .din98_WIDTH( 32 ),
    .din99_WIDTH( 32 ),
    .din100_WIDTH( 32 ),
    .din101_WIDTH( 32 ),
    .din102_WIDTH( 32 ),
    .din103_WIDTH( 32 ),
    .din104_WIDTH( 32 ),
    .din105_WIDTH( 32 ),
    .din106_WIDTH( 32 ),
    .din107_WIDTH( 32 ),
    .din108_WIDTH( 32 ),
    .din109_WIDTH( 32 ),
    .din110_WIDTH( 32 ),
    .din111_WIDTH( 32 ),
    .din112_WIDTH( 32 ),
    .din113_WIDTH( 32 ),
    .din114_WIDTH( 32 ),
    .din115_WIDTH( 32 ),
    .din116_WIDTH( 32 ),
    .din117_WIDTH( 32 ),
    .din118_WIDTH( 32 ),
    .din119_WIDTH( 32 ),
    .din120_WIDTH( 32 ),
    .din121_WIDTH( 32 ),
    .din122_WIDTH( 32 ),
    .din123_WIDTH( 32 ),
    .din124_WIDTH( 32 ),
    .din125_WIDTH( 32 ),
    .din126_WIDTH( 32 ),
    .din127_WIDTH( 32 ),
    .din128_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
mux_1287_32_1_1_U1(
    .din0(32'd10),
    .din1(32'd11),
    .din2(32'd11),
    .din3(32'd8),
    .din4(32'd3),
    .din5(32'd4294967293),
    .din6(32'd4294967288),
    .din7(32'd4294967285),
    .din8(32'd4294967285),
    .din9(32'd4294967286),
    .din10(32'd4294967286),
    .din11(32'd4294967286),
    .din12(32'd4294967286),
    .din13(32'd4294967286),
    .din14(32'd4294967286),
    .din15(32'd4294967286),
    .din16(32'd4294967286),
    .din17(32'd4294967286),
    .din18(32'd4294967286),
    .din19(32'd4294967286),
    .din20(32'd4294967286),
    .din21(32'd4294967286),
    .din22(32'd4294967286),
    .din23(32'd4294967286),
    .din24(32'd4294967286),
    .din25(32'd4294967286),
    .din26(32'd4294967286),
    .din27(32'd4294967286),
    .din28(32'd4294967286),
    .din29(32'd4294967286),
    .din30(32'd4294967286),
    .din31(32'd4294967286),
    .din32(32'd4294967286),
    .din33(32'd4294967285),
    .din34(32'd4294967285),
    .din35(32'd4294967288),
    .din36(32'd4294967293),
    .din37(32'd3),
    .din38(32'd8),
    .din39(32'd11),
    .din40(32'd11),
    .din41(32'd10),
    .din42(32'd10),
    .din43(32'd10),
    .din44(32'd10),
    .din45(32'd10),
    .din46(32'd10),
    .din47(32'd10),
    .din48(32'd10),
    .din49(32'd11),
    .din50(32'd11),
    .din51(32'd8),
    .din52(32'd3),
    .din53(32'd4294967293),
    .din54(32'd4294967288),
    .din55(32'd4294967285),
    .din56(32'd4294967285),
    .din57(32'd4294967286),
    .din58(32'd4294967286),
    .din59(32'd4294967286),
    .din60(32'd4294967286),
    .din61(32'd4294967286),
    .din62(32'd4294967286),
    .din63(32'd4294967286),
    .din64(32'd4294967286),
    .din65(32'd4294967285),
    .din66(32'd4294967285),
    .din67(32'd4294967288),
    .din68(32'd4294967293),
    .din69(32'd3),
    .din70(32'd8),
    .din71(32'd11),
    .din72(32'd11),
    .din73(32'd10),
    .din74(32'd10),
    .din75(32'd10),
    .din76(32'd10),
    .din77(32'd10),
    .din78(32'd10),
    .din79(32'd10),
    .din80(32'd10),
    .din81(32'd11),
    .din82(32'd11),
    .din83(32'd8),
    .din84(32'd3),
    .din85(32'd4294967293),
    .din86(32'd4294967288),
    .din87(32'd4294967285),
    .din88(32'd4294967285),
    .din89(32'd4294967286),
    .din90(32'd4294967286),
    .din91(32'd4294967286),
    .din92(32'd4294967286),
    .din93(32'd4294967286),
    .din94(32'd4294967286),
    .din95(32'd4294967286),
    .din96(32'd4294967286),
    .din97(32'd4294967285),
    .din98(32'd4294967285),
    .din99(32'd4294967288),
    .din100(32'd4294967293),
    .din101(32'd3),
    .din102(32'd8),
    .din103(32'd11),
    .din104(32'd11),
    .din105(32'd10),
    .din106(32'd10),
    .din107(32'd10),
    .din108(32'd10),
    .din109(32'd10),
    .din110(32'd10),
    .din111(32'd10),
    .din112(32'd10),
    .din113(32'd10),
    .din114(32'd10),
    .din115(32'd10),
    .din116(32'd10),
    .din117(32'd10),
    .din118(32'd10),
    .din119(32'd10),
    .din120(32'd10),
    .din121(32'd10),
    .din122(32'd10),
    .din123(32'd10),
    .din124(32'd10),
    .din125(32'd10),
    .din126(32'd10),
    .din127(32'd10),
    .din128(i_1_reg_496),
    .dout(phi_ln_fu_199_p130)
);

fir_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(phi_ln_reg_525),
    .din1(select_ln28_reg_520),
    .ce(1'b1),
    .dout(grp_fu_460_p2)
);

fir_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            acc_fu_60 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            acc_fu_60 <= acc_1_fu_467_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_64 <= add_ln26_fu_144_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 7'd127;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_496 <= ap_sig_allocacmp_i_1;
        icmp_ln26_reg_503 <= icmp_ln26_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln29_reg_530 <= grp_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_503 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        phi_ln_reg_525 <= phi_ln_fu_199_p130;
        select_ln28_reg_520 <= select_ln28_fu_174_p3;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_503 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_out_ap_vld = 1'b1;
    end else begin
        acc_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_503 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_503 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd127;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_0_ce0 = 1'b1;
    end else begin
        shift_reg_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        shift_reg_0_ce1 = 1'b1;
    end else begin
        shift_reg_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_503 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln28_fu_171_p1 == 1'd0))) begin
        shift_reg_0_we1 = 1'b1;
    end else begin
        shift_reg_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_1_ce0 = 1'b1;
    end else begin
        shift_reg_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        shift_reg_1_ce1 = 1'b1;
    end else begin
        shift_reg_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_503 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln28_fu_171_p1 == 1'd1))) begin
        shift_reg_1_we1 = 1'b1;
    end else begin
        shift_reg_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_467_p2 = (mul_ln29_reg_530 + acc_fu_60);

assign acc_out = acc_fu_60;

assign add_ln26_fu_144_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(7'd127));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln26_fu_138_p2 = ((ap_sig_allocacmp_i_1 == 7'd0) ? 1'b1 : 1'b0);

assign lshr_ln28_1_fu_184_p4 = {{i_1_reg_496[6:1]}};

assign lshr_ln_fu_150_p4 = {{add_ln26_fu_144_p2[6:1]}};

assign select_ln28_fu_174_p3 = ((trunc_ln28_fu_171_p1[0:0] == 1'b1) ? shift_reg_0_q0 : shift_reg_1_q0);

assign shift_reg_0_address0 = zext_ln28_fu_160_p1;

assign shift_reg_0_address1 = zext_ln28_1_fu_193_p1;

assign shift_reg_0_d1 = select_ln28_fu_174_p3;

assign shift_reg_1_address0 = zext_ln28_fu_160_p1;

assign shift_reg_1_address1 = zext_ln28_1_fu_193_p1;

assign trunc_ln28_fu_171_p1 = i_1_reg_496[0:0];

assign zext_ln28_1_fu_193_p1 = lshr_ln28_1_fu_184_p4;

assign zext_ln28_fu_160_p1 = lshr_ln_fu_150_p4;

endmodule //fir_fir_Pipeline_VITIS_LOOP_26_1
