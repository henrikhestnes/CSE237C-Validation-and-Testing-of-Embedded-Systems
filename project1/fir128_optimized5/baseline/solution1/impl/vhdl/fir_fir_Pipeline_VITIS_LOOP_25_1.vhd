-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_fir_Pipeline_VITIS_LOOP_25_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    acc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc_out_ap_vld : OUT STD_LOGIC;
    shift_reg_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    shift_reg_0_ce0 : OUT STD_LOGIC;
    shift_reg_0_we0 : OUT STD_LOGIC;
    shift_reg_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    shift_reg_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir_fir_Pipeline_VITIS_LOOP_25_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln25_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal c_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_ce0 : STD_LOGIC;
    signal c_0_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_1_ce0 : STD_LOGIC;
    signal c_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_2_ce0 : STD_LOGIC;
    signal c_2_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_3_ce0 : STD_LOGIC;
    signal c_3_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_4_ce0 : STD_LOGIC;
    signal c_4_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_5_ce0 : STD_LOGIC;
    signal c_5_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_6_ce0 : STD_LOGIC;
    signal c_6_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_7_ce0 : STD_LOGIC;
    signal c_7_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shift_reg_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_7_ce0 : STD_LOGIC;
    signal shift_reg_7_we0 : STD_LOGIC;
    signal shift_reg_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_1_ce0 : STD_LOGIC;
    signal shift_reg_1_we0 : STD_LOGIC;
    signal shift_reg_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_2_ce0 : STD_LOGIC;
    signal shift_reg_2_we0 : STD_LOGIC;
    signal shift_reg_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_3_ce0 : STD_LOGIC;
    signal shift_reg_3_we0 : STD_LOGIC;
    signal shift_reg_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_4_ce0 : STD_LOGIC;
    signal shift_reg_4_we0 : STD_LOGIC;
    signal shift_reg_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_5_ce0 : STD_LOGIC;
    signal shift_reg_5_we0 : STD_LOGIC;
    signal shift_reg_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_6_ce0 : STD_LOGIC;
    signal shift_reg_6_we0 : STD_LOGIC;
    signal shift_reg_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln25_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln27_fu_386_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_reg_574 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_reg_0_addr_reg_619 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_1_addr_reg_624 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_2_addr_reg_629 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_3_addr_reg_634 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_4_addr_reg_639 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_5_addr_reg_644 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_6_addr_reg_649 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_7_addr_reg_654 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_450_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_1_fu_512_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln27_1_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln27_2_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_86 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_fu_380_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal lshr_ln_fu_390_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln27_1_fu_412_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln27_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_512_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_512_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_512_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_512_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_512_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_mux_864_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_fir_Pipeline_VITIS_LOOP_25_1_c_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component fir_fir_Pipeline_VITIS_LOOP_25_1_c_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component fir_fir_Pipeline_VITIS_LOOP_25_1_c_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component fir_fir_Pipeline_VITIS_LOOP_25_1_c_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component fir_fir_Pipeline_VITIS_LOOP_25_1_c_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component fir_fir_Pipeline_VITIS_LOOP_25_1_c_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component fir_fir_Pipeline_VITIS_LOOP_25_1_c_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component fir_fir_Pipeline_VITIS_LOOP_25_1_shift_reg_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    c_0_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_c_0
    generic map (
        DataWidth => 5,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_0_address0,
        ce0 => c_0_ce0,
        q0 => c_0_q0);

    c_1_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_c_1
    generic map (
        DataWidth => 5,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_1_address0,
        ce0 => c_1_ce0,
        q0 => c_1_q0);

    c_2_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_c_1
    generic map (
        DataWidth => 5,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_2_address0,
        ce0 => c_2_ce0,
        q0 => c_2_q0);

    c_3_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_c_3
    generic map (
        DataWidth => 5,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_3_address0,
        ce0 => c_3_ce0,
        q0 => c_3_q0);

    c_4_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_c_4
    generic map (
        DataWidth => 5,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_4_address0,
        ce0 => c_4_ce0,
        q0 => c_4_q0);

    c_5_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_c_5
    generic map (
        DataWidth => 5,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_5_address0,
        ce0 => c_5_ce0,
        q0 => c_5_q0);

    c_6_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_c_6
    generic map (
        DataWidth => 5,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_6_address0,
        ce0 => c_6_ce0,
        q0 => c_6_q0);

    c_7_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_c_7
    generic map (
        DataWidth => 5,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_7_address0,
        ce0 => c_7_ce0,
        q0 => c_7_q0);

    shift_reg_7_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_shift_reg_7
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_7_address0,
        ce0 => shift_reg_7_ce0,
        we0 => shift_reg_7_we0,
        d0 => tmp_fu_450_p10,
        q0 => shift_reg_7_q0);

    shift_reg_1_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_shift_reg_7
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_1_address0,
        ce0 => shift_reg_1_ce0,
        we0 => shift_reg_1_we0,
        d0 => tmp_fu_450_p10,
        q0 => shift_reg_1_q0);

    shift_reg_2_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_shift_reg_7
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_2_address0,
        ce0 => shift_reg_2_ce0,
        we0 => shift_reg_2_we0,
        d0 => tmp_fu_450_p10,
        q0 => shift_reg_2_q0);

    shift_reg_3_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_shift_reg_7
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_3_address0,
        ce0 => shift_reg_3_ce0,
        we0 => shift_reg_3_we0,
        d0 => tmp_fu_450_p10,
        q0 => shift_reg_3_q0);

    shift_reg_4_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_shift_reg_7
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_4_address0,
        ce0 => shift_reg_4_ce0,
        we0 => shift_reg_4_we0,
        d0 => tmp_fu_450_p10,
        q0 => shift_reg_4_q0);

    shift_reg_5_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_shift_reg_7
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_5_address0,
        ce0 => shift_reg_5_ce0,
        we0 => shift_reg_5_we0,
        d0 => tmp_fu_450_p10,
        q0 => shift_reg_5_q0);

    shift_reg_6_U : component fir_fir_Pipeline_VITIS_LOOP_25_1_shift_reg_7
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_6_address0,
        ce0 => shift_reg_6_ce0,
        we0 => shift_reg_6_we0,
        d0 => tmp_fu_450_p10,
        q0 => shift_reg_6_q0);

    mux_864_32_1_1_U1 : component fir_mux_864_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => shift_reg_7_q0,
        din1 => shift_reg_0_q0,
        din2 => shift_reg_1_q0,
        din3 => shift_reg_2_q0,
        din4 => shift_reg_3_q0,
        din5 => shift_reg_4_q0,
        din6 => shift_reg_5_q0,
        din7 => shift_reg_6_q0,
        din8 => zext_ln27_fu_447_p1,
        dout => tmp_fu_450_p10);

    mux_864_32_1_1_U2 : component fir_mux_864_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_1_fu_512_p1,
        din1 => tmp_1_fu_512_p2,
        din2 => tmp_1_fu_512_p3,
        din3 => tmp_1_fu_512_p4,
        din4 => tmp_1_fu_512_p5,
        din5 => tmp_1_fu_512_p6,
        din6 => tmp_1_fu_512_p7,
        din7 => tmp_1_fu_512_p8,
        din8 => zext_ln27_fu_447_p1,
        dout => tmp_1_fu_512_p10);

    mul_32s_32s_32_2_1_U3 : component fir_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_704,
        din1 => tmp_reg_699,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);

    flow_control_loop_pipe_sequential_init_U : component fir_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    acc_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    acc_fu_82 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    acc_fu_82 <= acc_1_fu_541_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_374_p2 = ap_const_lv1_0))) then 
                    i_fu_86 <= add_ln25_fu_380_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_86 <= ap_const_lv7_7F;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln25_reg_570 <= icmp_ln25_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln28_reg_709 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln25_fu_374_p2 = ap_const_lv1_0))) then
                shift_reg_0_addr_reg_619 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);
                shift_reg_1_addr_reg_624 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);
                shift_reg_2_addr_reg_629 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);
                shift_reg_3_addr_reg_634 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);
                shift_reg_4_addr_reg_639 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);
                shift_reg_5_addr_reg_644 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);
                shift_reg_6_addr_reg_649 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);
                shift_reg_7_addr_reg_654 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);
                trunc_ln27_reg_574 <= trunc_ln27_fu_386_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_1_reg_704 <= tmp_1_fu_512_p10;
                tmp_reg_699 <= tmp_fu_450_p10;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    acc_1_fu_541_p2 <= std_logic_vector(unsigned(mul_ln28_reg_709) + unsigned(acc_fu_82));
    acc_out <= acc_fu_82;

    acc_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln25_reg_570, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_out_ap_vld <= ap_const_logic_1;
        else 
            acc_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln25_fu_380_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_7F));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln25_reg_570)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_570, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_7F;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_86;
        end if; 
    end process;

    c_0_address0 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);

    c_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_0_ce0 <= ap_const_logic_1;
        else 
            c_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_address0 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);

    c_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_1_ce0 <= ap_const_logic_1;
        else 
            c_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_2_address0 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);

    c_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_2_ce0 <= ap_const_logic_1;
        else 
            c_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_3_address0 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);

    c_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_3_ce0 <= ap_const_logic_1;
        else 
            c_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_4_address0 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);

    c_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_4_ce0 <= ap_const_logic_1;
        else 
            c_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_5_address0 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);

    c_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_5_ce0 <= ap_const_logic_1;
        else 
            c_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_6_address0 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);

    c_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_6_ce0 <= ap_const_logic_1;
        else 
            c_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_7_address0 <= zext_ln27_2_fu_422_p1(4 - 1 downto 0);

    c_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_7_ce0 <= ap_const_logic_1;
        else 
            c_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln25_fu_374_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_0) else "0";
    lshr_ln27_1_fu_412_p4 <= ap_sig_allocacmp_i_1(6 downto 3);
    lshr_ln_fu_390_p4 <= add_ln25_fu_380_p2(6 downto 3);

    shift_reg_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, shift_reg_0_addr_reg_619, zext_ln27_1_fu_400_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                shift_reg_0_address0 <= shift_reg_0_addr_reg_619;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_0_address0 <= zext_ln27_1_fu_400_p1(4 - 1 downto 0);
            else 
                shift_reg_0_address0 <= "XXXX";
            end if;
        else 
            shift_reg_0_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shift_reg_0_ce0 <= ap_const_logic_1;
        else 
            shift_reg_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shift_reg_0_d0 <= tmp_fu_450_p10;

    shift_reg_0_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln25_reg_570, trunc_ln27_reg_574, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln27_reg_574 = ap_const_lv3_0))) then 
            shift_reg_0_we0 <= ap_const_logic_1;
        else 
            shift_reg_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, shift_reg_1_addr_reg_624, zext_ln27_1_fu_400_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                shift_reg_1_address0 <= shift_reg_1_addr_reg_624;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_1_address0 <= zext_ln27_1_fu_400_p1(4 - 1 downto 0);
            else 
                shift_reg_1_address0 <= "XXXX";
            end if;
        else 
            shift_reg_1_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shift_reg_1_ce0 <= ap_const_logic_1;
        else 
            shift_reg_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln25_reg_570, trunc_ln27_reg_574, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln27_reg_574 = ap_const_lv3_1))) then 
            shift_reg_1_we0 <= ap_const_logic_1;
        else 
            shift_reg_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, shift_reg_2_addr_reg_629, zext_ln27_1_fu_400_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                shift_reg_2_address0 <= shift_reg_2_addr_reg_629;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_2_address0 <= zext_ln27_1_fu_400_p1(4 - 1 downto 0);
            else 
                shift_reg_2_address0 <= "XXXX";
            end if;
        else 
            shift_reg_2_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shift_reg_2_ce0 <= ap_const_logic_1;
        else 
            shift_reg_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_2_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln25_reg_570, trunc_ln27_reg_574, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln27_reg_574 = ap_const_lv3_2))) then 
            shift_reg_2_we0 <= ap_const_logic_1;
        else 
            shift_reg_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, shift_reg_3_addr_reg_634, zext_ln27_1_fu_400_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                shift_reg_3_address0 <= shift_reg_3_addr_reg_634;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_3_address0 <= zext_ln27_1_fu_400_p1(4 - 1 downto 0);
            else 
                shift_reg_3_address0 <= "XXXX";
            end if;
        else 
            shift_reg_3_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shift_reg_3_ce0 <= ap_const_logic_1;
        else 
            shift_reg_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_3_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln25_reg_570, trunc_ln27_reg_574, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln27_reg_574 = ap_const_lv3_3))) then 
            shift_reg_3_we0 <= ap_const_logic_1;
        else 
            shift_reg_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, shift_reg_4_addr_reg_639, zext_ln27_1_fu_400_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                shift_reg_4_address0 <= shift_reg_4_addr_reg_639;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_4_address0 <= zext_ln27_1_fu_400_p1(4 - 1 downto 0);
            else 
                shift_reg_4_address0 <= "XXXX";
            end if;
        else 
            shift_reg_4_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shift_reg_4_ce0 <= ap_const_logic_1;
        else 
            shift_reg_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_4_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln25_reg_570, trunc_ln27_reg_574, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln27_reg_574 = ap_const_lv3_4))) then 
            shift_reg_4_we0 <= ap_const_logic_1;
        else 
            shift_reg_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, shift_reg_5_addr_reg_644, zext_ln27_1_fu_400_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                shift_reg_5_address0 <= shift_reg_5_addr_reg_644;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_5_address0 <= zext_ln27_1_fu_400_p1(4 - 1 downto 0);
            else 
                shift_reg_5_address0 <= "XXXX";
            end if;
        else 
            shift_reg_5_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shift_reg_5_ce0 <= ap_const_logic_1;
        else 
            shift_reg_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_5_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln25_reg_570, trunc_ln27_reg_574, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln27_reg_574 = ap_const_lv3_5))) then 
            shift_reg_5_we0 <= ap_const_logic_1;
        else 
            shift_reg_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, shift_reg_6_addr_reg_649, zext_ln27_1_fu_400_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                shift_reg_6_address0 <= shift_reg_6_addr_reg_649;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_6_address0 <= zext_ln27_1_fu_400_p1(4 - 1 downto 0);
            else 
                shift_reg_6_address0 <= "XXXX";
            end if;
        else 
            shift_reg_6_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shift_reg_6_ce0 <= ap_const_logic_1;
        else 
            shift_reg_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_6_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln25_reg_570, trunc_ln27_reg_574, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln27_reg_574 = ap_const_lv3_6))) then 
            shift_reg_6_we0 <= ap_const_logic_1;
        else 
            shift_reg_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, shift_reg_7_addr_reg_654, zext_ln27_1_fu_400_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                shift_reg_7_address0 <= shift_reg_7_addr_reg_654;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_7_address0 <= zext_ln27_1_fu_400_p1(4 - 1 downto 0);
            else 
                shift_reg_7_address0 <= "XXXX";
            end if;
        else 
            shift_reg_7_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shift_reg_7_ce0 <= ap_const_logic_1;
        else 
            shift_reg_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_7_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln25_reg_570, trunc_ln27_reg_574, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln25_reg_570 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln27_reg_574 = ap_const_lv3_7))) then 
            shift_reg_7_we0 <= ap_const_logic_1;
        else 
            shift_reg_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_0_q0),32));

        tmp_1_fu_512_p2 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_1_q0),32));

        tmp_1_fu_512_p3 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_2_q0),32));

        tmp_1_fu_512_p4 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_3_q0),32));

        tmp_1_fu_512_p5 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_4_q0),32));

        tmp_1_fu_512_p6 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_5_q0),32));

        tmp_1_fu_512_p7 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_6_q0),32));

        tmp_1_fu_512_p8 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_7_q0),32));

    trunc_ln27_fu_386_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    zext_ln27_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_390_p4),64));
    zext_ln27_2_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln27_1_fu_412_p4),64));
    zext_ln27_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln27_reg_574),64));
end behav;
