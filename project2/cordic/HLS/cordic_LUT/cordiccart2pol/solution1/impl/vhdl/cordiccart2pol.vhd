-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (7 downto 0);
    y : IN STD_LOGIC_VECTOR (7 downto 0);
    r : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_ap_vld : OUT STD_LOGIC;
    theta : OUT STD_LOGIC_VECTOR (7 downto 0);
    theta_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordiccart2pol is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordiccart2pol_cordiccart2pol,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=104,HLS_VERSION=2021_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal my_LUT_th_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal my_LUT_th_V_ce0 : STD_LOGIC;
    signal my_LUT_th_V_we0 : STD_LOGIC;
    signal my_LUT_th_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal my_LUT_r_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal my_LUT_r_V_ce0 : STD_LOGIC;
    signal my_LUT_r_V_we0 : STD_LOGIC;
    signal my_LUT_r_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln573_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal fixed_x_V_1_fu_132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln794_fu_138_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_164_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln795_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln346_fu_190_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln795_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fixed_y_V_1_fu_218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln794_1_fu_224_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_fu_210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_1_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_250_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln795_1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln346_1_fu_276_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln795_1_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_194_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln340_1_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_280_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln794_fu_296_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln794_1_fu_304_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_fu_312_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cordiccart2pol_my_LUT_th_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    my_LUT_th_V_U : component cordiccart2pol_my_LUT_th_V
    generic map (
        DataWidth => 1,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => my_LUT_th_V_address0,
        ce0 => my_LUT_th_V_ce0,
        we0 => my_LUT_th_V_we0,
        d0 => ap_const_lv1_0,
        q0 => my_LUT_th_V_q0);

    my_LUT_r_V_U : component cordiccart2pol_my_LUT_th_V
    generic map (
        DataWidth => 1,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => my_LUT_r_V_address0,
        ce0 => my_LUT_r_V_ce0,
        we0 => my_LUT_r_V_we0,
        d0 => ap_const_lv1_0,
        q0 => my_LUT_r_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    and_ln340_1_fu_290_p2 <= (or_ln795_1_fu_264_p2 and or_ln340_1_fu_270_p2);
    and_ln340_fu_204_p2 <= (or_ln795_fu_178_p2 and or_ln340_fu_184_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    fixed_x_V_1_fu_132_p2 <= std_logic_vector(shift_left(unsigned(x),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    fixed_y_V_1_fu_218_p2 <= std_logic_vector(shift_left(unsigned(y),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));

    my_LUT_r_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln573_fu_320_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            my_LUT_r_V_address0 <= zext_ln573_fu_320_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            my_LUT_r_V_address0 <= ap_const_lv64_0(16 - 1 downto 0);
        else 
            my_LUT_r_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    my_LUT_r_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            my_LUT_r_V_ce0 <= ap_const_logic_1;
        else 
            my_LUT_r_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    my_LUT_r_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            my_LUT_r_V_we0 <= ap_const_logic_1;
        else 
            my_LUT_r_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    my_LUT_th_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln573_fu_320_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            my_LUT_th_V_address0 <= zext_ln573_fu_320_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            my_LUT_th_V_address0 <= ap_const_lv64_0(16 - 1 downto 0);
        else 
            my_LUT_th_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    my_LUT_th_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            my_LUT_th_V_ce0 <= ap_const_logic_1;
        else 
            my_LUT_th_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    my_LUT_th_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            my_LUT_th_V_we0 <= ap_const_logic_1;
        else 
            my_LUT_th_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln340_1_fu_270_p2 <= (p_Result_2_fu_210_p3 or overflow_1_fu_244_p2);
    or_ln340_fu_184_p2 <= (p_Result_s_fu_124_p3 or overflow_fu_158_p2);
    or_ln794_1_fu_224_p2 <= (y or fixed_y_V_1_fu_218_p2);
    or_ln794_fu_138_p2 <= (x or fixed_x_V_1_fu_132_p2);
    or_ln795_1_fu_264_p2 <= (xor_ln795_1_fu_258_p2 or xor_ln794_1_fu_238_p2);
    or_ln795_fu_178_p2 <= (xor_ln795_fu_172_p2 or xor_ln794_fu_152_p2);
    overflow_1_fu_244_p2 <= (xor_ln794_1_fu_238_p2 and tmp_3_fu_230_p3);
    overflow_fu_158_p2 <= (xor_ln794_fu_152_p2 and tmp_fu_144_p3);
    p_Result_1_fu_194_p4 <= ((p_Result_s_fu_124_p3 & trunc_ln346_fu_190_p1) & ap_const_lv1_0);
    p_Result_2_fu_210_p3 <= y(7 downto 7);
    p_Result_3_fu_280_p4 <= ((p_Result_2_fu_210_p3 & trunc_ln346_1_fu_276_p1) & ap_const_lv1_0);
    p_Result_4_fu_312_p3 <= (select_ln794_fu_296_p3 & select_ln794_1_fu_304_p3);
    p_Result_s_fu_124_p3 <= x(7 downto 7);
    r <= std_logic_vector(IEEE.numeric_std.resize(unsigned(my_LUT_r_V_q0),8));

    r_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_ap_vld <= ap_const_logic_1;
        else 
            r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln794_1_fu_304_p3 <= 
        p_Result_3_fu_280_p4 when (and_ln340_1_fu_290_p2(0) = '1') else 
        fixed_y_V_1_fu_218_p2;
    select_ln794_fu_296_p3 <= 
        p_Result_1_fu_194_p4 when (and_ln340_fu_204_p2(0) = '1') else 
        fixed_x_V_1_fu_132_p2;
    theta <= std_logic_vector(IEEE.numeric_std.resize(unsigned(my_LUT_th_V_q0),8));

    theta_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            theta_ap_vld <= ap_const_logic_1;
        else 
            theta_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_164_p3 <= x(6 downto 6);
    tmp_3_fu_230_p3 <= or_ln794_1_fu_224_p2(7 downto 7);
    tmp_4_fu_250_p3 <= y(6 downto 6);
    tmp_fu_144_p3 <= or_ln794_fu_138_p2(7 downto 7);
    trunc_ln346_1_fu_276_p1 <= y(6 - 1 downto 0);
    trunc_ln346_fu_190_p1 <= x(6 - 1 downto 0);
    xor_ln794_1_fu_238_p2 <= (p_Result_2_fu_210_p3 xor ap_const_lv1_1);
    xor_ln794_fu_152_p2 <= (p_Result_s_fu_124_p3 xor ap_const_lv1_1);
    xor_ln795_1_fu_258_p2 <= (tmp_4_fu_250_p3 xor ap_const_lv1_1);
    xor_ln795_fu_172_p2 <= (tmp_1_fu_164_p3 xor ap_const_lv1_1);
    zext_ln573_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_312_p3),64));
end behav;
