-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of cordiccart2pol is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordiccart2pol_cordiccart2pol,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.238000,HLS_SYN_LAT=30,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1201,HLS_SYN_LUT=3812,HLS_VERSION=2021_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_D : STD_LOGIC_VECTOR (11 downto 0) := "000000001101";
    constant ap_const_lv12_FF3 : STD_LOGIC_VECTOR (11 downto 0) := "111111110011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_11 : STD_LOGIC_VECTOR (11 downto 0) := "000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_6487 : STD_LOGIC_VECTOR (16 downto 0) := "00110010010000111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv30_3FFFFFFF : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111111111111111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv34_3FFFFFFFF : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111111111111111111111";
    constant ap_const_lv34_1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv17_1FFE8 : STD_LOGIC_VECTOR (16 downto 0) := "11111111111101000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv31_136E : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001001101101110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x : STD_LOGIC_VECTOR (31 downto 0);
    signal y : STD_LOGIC_VECTOR (31 downto 0);
    signal r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_ap_vld : STD_LOGIC;
    signal theta : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_ap_vld : STD_LOGIC;
    signal angles_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal angles_V_ce0 : STD_LOGIC;
    signal angles_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_read_reg_1598 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_read_reg_1604 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_reg_1610 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exp_tmp_reg_1615 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln574_fu_282_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln574_reg_1620 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln580_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln580_reg_1625 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1632 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_1_reg_1637 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln574_1_fu_318_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln574_1_reg_1642 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln580_1_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln580_1_reg_1647 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_348_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1654 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sh_amt_fu_379_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1659 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln592_fu_393_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln592_reg_1664 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln594_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln594_reg_1669 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln590_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln590_reg_1674 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln594_fu_476_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln594_reg_1679 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln612_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln612_reg_1684 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_5_fu_522_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_5_reg_1689 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_1_fu_553_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_1694 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln592_1_fu_567_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln592_1_reg_1699 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln594_1_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln594_1_reg_1704 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln590_1_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln590_1_reg_1709 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln594_2_fu_650_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln594_2_reg_1714 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln612_1_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln612_1_reg_1719 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln590_fu_676_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln590_reg_1724 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln594_1_fu_696_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln594_1_reg_1729 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln590_1_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln590_1_reg_1734 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln594_3_fu_723_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln594_3_reg_1739 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_8_fu_808_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_8_reg_1744 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal x_i_V_2_fu_816_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_2_reg_1749 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1547_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1057_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_i_V_5_fu_910_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_5_reg_1767 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_11_fu_918_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_11_reg_1772 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln988_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln988_reg_1782 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_Result_21_fu_979_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_reg_1787 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_992_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_V_4_reg_1792 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln990_fu_1000_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln990_reg_1797 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sub_ln997_fu_1033_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln997_reg_1804 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1039_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_1810 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1817 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1000_fu_1055_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1000_reg_1822 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_23_fu_1059_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_reg_1827 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln996_fu_1067_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln996_reg_1833 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln988_1_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln988_1_reg_1838 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_1077_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_reg_1843 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_5_fu_1091_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_5_reg_1848 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln997_1_fu_1125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln997_1_reg_1855 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln997_fu_1131_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln997_reg_1862 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1000_1_fu_1135_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1000_1_reg_1867 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln996_1_fu_1139_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln996_1_reg_1872 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1007_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1007_reg_1877 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal select_ln1007_fu_1219_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1007_reg_1882 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1011_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1011_reg_1887 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool34_i_i663_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool34_i_i663_reg_1892 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_9_reg_1897 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Result_8_reg_1902 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_8_reg_1907 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_15_reg_1912 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_V_cast_fu_855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal r_V_1_fu_182 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_r_V_1_load_1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_load_fu_245_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_2_fu_186 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_y_i_V_2_load : STD_LOGIC_VECTOR (16 downto 0);
    signal theta_i_V_fu_190 : STD_LOGIC_VECTOR (16 downto 0);
    signal theta_i_V_3_fu_947_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln1548_fu_800_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_V_fu_194 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln870_fu_846_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln564_fu_260_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_1_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln564_1_fu_296_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_18_fu_331_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln578_fu_338_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_342_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln494_fu_328_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_355_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln590_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln590_fu_367_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln590_fu_373_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln709_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln580_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln591_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln591_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln591_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln594_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln594_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln597_fu_420_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln591_fu_439_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln590_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln612_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln590_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_505_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln578_1_fu_512_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_fu_516_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln494_1_fu_502_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_fu_529_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln590_1_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln590_1_fu_541_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln590_1_fu_547_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln709_2_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_1_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln580_1_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln591_1_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln591_1_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln591_1_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln594_1_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln594_2_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln597_1_fu_594_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln591_1_fu_613_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln590_1_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln612_1_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln590_1_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln595_fu_679_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln595_fu_683_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln594_1_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_fu_688_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln595_1_fu_706_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln595_1_fu_710_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln594_3_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_1_fu_715_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln590cast_fu_730_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln613_fu_733_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln612_fu_738_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln590_1cast_fu_751_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln613_1_fu_754_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln612_1_fu_759_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_fu_744_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_fu_765_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_792_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_772_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_i_V_7_fu_786_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_1_fu_780_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sh_fu_866_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1386_fu_870_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_1_fu_874_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_2_fu_880_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_3_fu_886_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_4_fu_898_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_9_fu_892_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_10_fu_904_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1452_fu_931_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal theta_i_V_1_fu_935_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal theta_i_V_2_fu_941_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1561_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1168_fu_971_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_V_fu_986_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_s_fu_1003_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Result_22_fu_1013_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1021_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_1029_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_2_fu_1085_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_11_fu_1099_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_26_fu_1109_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_1117_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1000_fu_1148_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1000_fu_1153_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln1002_fu_1163_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal lshr_ln1000_fu_1157_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln1002_fu_1166_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln1002_1_fu_1172_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln1002_fu_1178_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_11_fu_1189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1002_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln999_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1002_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln999_fu_1212_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1002_1_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lsb_index_1_fu_1227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1232_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1000_1_fu_1248_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1000_1_fu_1253_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln1000_1_fu_1257_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_13_fu_1263_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_fu_1274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln999_1_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1000_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1002_fu_1294_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_14_fu_1299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln999_fu_1288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1002_1_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1008_fu_1324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1008_fu_1329_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln1007_fu_1338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1007_fu_1343_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal lshr_ln1007_fu_1347_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln1008_fu_1333_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_fu_1352_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln1004_fu_1359_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln1014_fu_1363_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_1_fu_1366_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1011_fu_1393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1010_fu_1390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1011_fu_1398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1012_fu_1408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1012_fu_1413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1011_fu_1402_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1012_fu_1417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_4_fu_1423_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1014_1_fu_1430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_1433_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1017_fu_1467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln996_fu_1460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1017_fu_1472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1004_1_fu_1457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_1478_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_24_fu_1485_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_2_fu_1497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1017_1_fu_1519_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln996_1_fu_1512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1017_1_fu_1524_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1015_fu_1509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_1530_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_27_fu_1537_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_3_fu_1549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1561_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cordiccart2pol_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cordiccart2pol_mul_mul_17s_13ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component cordiccart2pol_angles_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cordiccart2pol_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        x : OUT STD_LOGIC_VECTOR (31 downto 0);
        y : OUT STD_LOGIC_VECTOR (31 downto 0);
        r : IN STD_LOGIC_VECTOR (31 downto 0);
        r_ap_vld : IN STD_LOGIC;
        theta : IN STD_LOGIC_VECTOR (31 downto 0);
        theta_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    angles_V_U : component cordiccart2pol_angles_V
    generic map (
        DataWidth => 13,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => angles_V_address0,
        ce0 => angles_V_ce0,
        q0 => angles_V_q0);

    control_s_axi_U : component cordiccart2pol_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        x => x,
        y => y,
        r => r,
        r_ap_vld => r_ap_vld,
        theta => theta,
        theta_ap_vld => theta_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    fpext_32ns_64_2_no_dsp_1_U1 : component cordiccart2pol_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p1);

    fpext_32ns_64_2_no_dsp_1_U2 : component cordiccart2pol_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => y,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p1);

    mul_mul_17s_13ns_31_4_1_U3 : component cordiccart2pol_mul_mul_17s_13ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_load_fu_245_p1,
        din1 => grp_fu_1561_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1561_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_V_fu_194 <= ap_const_lv5_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1057_fu_840_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_V_fu_194 <= add_ln870_fu_846_p2;
            end if; 
        end if;
    end process;

    r_V_1_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_V_1_fu_182 <= x_i_V_2_reg_1749;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                r_V_1_fu_182 <= x_i_V_5_reg_1767;
            end if; 
        end if;
    end process;

    theta_i_V_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                theta_i_V_fu_190 <= select_ln1548_fu_800_p3;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                theta_i_V_fu_190 <= theta_i_V_3_fu_947_p3;
            end if; 
        end if;
    end process;

    y_i_V_2_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                y_i_V_2_fu_186 <= y_i_V_8_reg_1744;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_i_V_2_fu_186 <= y_i_V_11_reg_1772;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_1_reg_1647 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln590_1_reg_1709 <= and_ln590_1_fu_632_p2;
                and_ln612_1_reg_1719 <= and_ln612_1_fu_670_p2;
                icmp_ln594_1_reg_1704 <= icmp_ln594_1_fu_571_p2;
                man_V_5_reg_1689 <= man_V_5_fu_522_p3;
                select_ln594_2_reg_1714 <= select_ln594_2_fu_650_p3;
                sh_amt_1_reg_1694 <= sh_amt_1_fu_553_p3;
                trunc_ln592_1_reg_1699 <= trunc_ln592_1_fu_567_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_reg_1625 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln590_reg_1674 <= and_ln590_fu_458_p2;
                and_ln612_reg_1684 <= and_ln612_fu_496_p2;
                icmp_ln594_reg_1669 <= icmp_ln594_fu_397_p2;
                man_V_2_reg_1654 <= man_V_2_fu_348_p3;
                select_ln594_reg_1679 <= select_ln594_fu_476_p3;
                sh_amt_reg_1659 <= sh_amt_fu_379_p3;
                trunc_ln592_reg_1664 <= trunc_ln592_fu_393_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                exp_tmp_1_reg_1637 <= ireg_1_fu_292_p1(62 downto 52);
                exp_tmp_reg_1615 <= ireg_fu_256_p1(62 downto 52);
                icmp_ln580_1_reg_1647 <= icmp_ln580_1_fu_322_p2;
                icmp_ln580_reg_1625 <= icmp_ln580_fu_286_p2;
                p_Result_17_reg_1610 <= ireg_fu_256_p1(63 downto 63);
                p_Result_19_reg_1632 <= ireg_1_fu_292_p1(63 downto 63);
                trunc_ln574_1_reg_1642 <= trunc_ln574_1_fu_318_p1;
                trunc_ln574_reg_1620 <= trunc_ln574_fu_282_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln988_reg_1782 = ap_const_lv1_0))) then
                icmp_ln1007_reg_1877 <= icmp_ln1007_fu_1202_p2;
                select_ln1007_reg_1882 <= select_ln1007_fu_1219_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln988_1_reg_1838 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                icmp_ln1011_reg_1887 <= icmp_ln1011_fu_1312_p2;
                tobool34_i_i663_reg_1892 <= tobool34_i_i663_fu_1318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1057_fu_840_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1547_reg_1757 <= icmp_ln1547_fu_860_p2;
                x_i_V_5_reg_1767 <= x_i_V_5_fu_910_p3;
                y_i_V_11_reg_1772 <= y_i_V_11_fu_918_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln988_1_reg_1838 <= icmp_ln988_1_fu_1071_p2;
                p_Result_25_reg_1843 <= theta_i_V_fu_190(16 downto 16);
                sub_ln997_1_reg_1855 <= sub_ln997_1_fu_1125_p2;
                tmp_V_5_reg_1848 <= tmp_V_5_fu_1091_p3;
                trunc_ln1000_1_reg_1867 <= trunc_ln1000_1_fu_1135_p1;
                trunc_ln996_1_reg_1872 <= trunc_ln996_1_fu_1139_p1;
                trunc_ln997_reg_1862 <= trunc_ln997_fu_1131_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln988_reg_1782 <= icmp_ln988_fu_974_p2;
                p_Result_21_reg_1787 <= grp_fu_1561_p2(30 downto 30);
                tmp_V_4_reg_1792 <= tmp_V_4_fu_992_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln988_reg_1782 = ap_const_lv1_0))) then
                lsb_index_reg_1810 <= lsb_index_fu_1039_p2;
                p_Result_23_reg_1827 <= p_Result_23_fu_1059_p3;
                sext_ln990_reg_1797 <= sext_ln990_fu_1000_p1;
                sub_ln997_reg_1804 <= sub_ln997_fu_1033_p2;
                tmp_10_reg_1817 <= lsb_index_fu_1039_p2(31 downto 1);
                trunc_ln1000_reg_1822 <= trunc_ln1000_fu_1055_p1;
                trunc_ln996_reg_1833 <= trunc_ln996_fu_1067_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln988_1_reg_1838 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                m_8_reg_1907 <= m_5_fu_1433_p2(63 downto 1);
                p_Result_15_reg_1912 <= m_5_fu_1433_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln988_reg_1782 = ap_const_lv1_0))) then
                m_9_reg_1897 <= m_1_fu_1366_p2(34 downto 1);
                p_Result_8_reg_1902 <= m_1_fu_1366_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln612_reg_1684) and (icmp_ln580_reg_1625 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln594_1_reg_1729 <= select_ln594_1_fu_696_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln612_1_reg_1719) and (icmp_ln580_1_reg_1647 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln594_3_reg_1739 <= select_ln594_3_fu_723_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_1_reg_1647 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sext_ln590_1_reg_1734 <= sext_ln590_1_fu_703_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_reg_1625 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sext_ln590_reg_1724 <= sext_ln590_fu_676_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                x_i_V_2_reg_1749 <= x_i_V_2_fu_816_p3;
                y_i_V_8_reg_1744 <= y_i_V_8_fu_808_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                x_read_reg_1604 <= x;
                y_read_reg_1598 <= y;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1057_fu_840_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1057_fu_840_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1057_fu_840_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_529_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln494_1_fu_502_p1));
    F2_fu_355_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln494_fu_328_p1));
    LD_2_fu_1497_p1 <= p_Result_24_fu_1485_p5(32 - 1 downto 0);
    LD_3_fu_1549_p1 <= p_Result_27_fu_1537_p5(32 - 1 downto 0);
    a_1_fu_1306_p2 <= (p_Result_14_fu_1299_p3 or and_ln999_fu_1288_p2);
    add_ln1002_fu_1294_p2 <= std_logic_vector(unsigned(trunc_ln997_reg_1862) + unsigned(ap_const_lv17_1FFE8));
    add_ln1007_fu_1338_p2 <= std_logic_vector(unsigned(sub_ln997_reg_1804) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1011_fu_1393_p2 <= std_logic_vector(unsigned(sub_ln997_1_reg_1855) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1017_1_fu_1524_p2 <= std_logic_vector(unsigned(sub_ln1017_1_fu_1519_p2) + unsigned(select_ln996_1_fu_1512_p3));
    add_ln1017_fu_1472_p2 <= std_logic_vector(unsigned(sub_ln1017_fu_1467_p2) + unsigned(select_ln996_fu_1460_p3));
    add_ln590_1_fu_541_p2 <= std_logic_vector(unsigned(F2_1_fu_529_p2) + unsigned(ap_const_lv12_FF3));
    add_ln590_fu_367_p2 <= std_logic_vector(unsigned(F2_fu_355_p2) + unsigned(ap_const_lv12_FF3));
    add_ln870_fu_846_p2 <= std_logic_vector(unsigned(i_V_fu_194) + unsigned(ap_const_lv5_1));
    and_ln1002_1_fu_1207_p2 <= (xor_ln1002_fu_1196_p2 and p_Result_23_reg_1827);
    and_ln1002_fu_1178_p2 <= (sext_ln990_reg_1797 and or_ln1002_1_fu_1172_p2);
    and_ln590_1_fu_632_p2 <= (xor_ln591_1_fu_626_p2 and icmp_ln590_1_fu_535_p2);
    and_ln590_fu_458_p2 <= (xor_ln591_fu_452_p2 and icmp_ln590_fu_361_p2);
    and_ln591_1_fu_607_p2 <= (xor_ln580_1_fu_602_p2 and icmp_ln591_1_fu_561_p2);
    and_ln591_fu_433_p2 <= (xor_ln580_fu_428_p2 and icmp_ln591_fu_387_p2);
    and_ln594_1_fu_692_p2 <= (icmp_ln594_reg_1669 and and_ln590_reg_1674);
    and_ln594_2_fu_644_p2 <= (xor_ln594_1_fu_638_p2 and and_ln590_1_fu_632_p2);
    and_ln594_3_fu_719_p2 <= (icmp_ln594_1_reg_1704 and and_ln590_1_reg_1709);
    and_ln594_fu_470_p2 <= (xor_ln594_fu_464_p2 and and_ln590_fu_458_p2);
    and_ln612_1_fu_670_p2 <= (xor_ln590_1_fu_664_p2 and icmp_ln612_1_fu_577_p2);
    and_ln612_fu_496_p2 <= (xor_ln590_fu_490_p2 and icmp_ln612_fu_403_p2);
    and_ln999_fu_1288_p2 <= (icmp_ln999_1_fu_1242_p2 and icmp_ln1000_fu_1268_p2);
    angles_V_address0 <= i_V_cast_fu_855_p1(4 - 1 downto 0);

    angles_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            angles_V_ce0 <= ap_const_logic_1;
        else 
            angles_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln1057_fu_840_p2)
    begin
        if ((icmp_ln1057_fu_840_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_r_V_1_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, x_i_V_5_reg_1767, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, r_V_1_fu_182)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_r_V_1_load_1 <= x_i_V_5_reg_1767;
        else 
            ap_sig_allocacmp_r_V_1_load_1 <= r_V_1_fu_182;
        end if; 
    end process;


    ap_sig_allocacmp_y_i_V_2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, y_i_V_11_reg_1772, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, y_i_V_2_fu_186)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_y_i_V_2_load <= y_i_V_11_reg_1772;
        else 
            ap_sig_allocacmp_y_i_V_2_load <= y_i_V_2_fu_186;
        end if; 
    end process;

    ashr_ln595_1_fu_710_p2 <= std_logic_vector(shift_right(signed(man_V_5_reg_1689),to_integer(unsigned('0' & zext_ln595_1_fu_706_p1(31-1 downto 0)))));
    ashr_ln595_fu_683_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_1654),to_integer(unsigned('0' & zext_ln595_fu_679_p1(31-1 downto 0)))));
    bitcast_ln709_2_fu_583_p1 <= y_read_reg_1598;
    bitcast_ln709_fu_409_p1 <= x_read_reg_1604;
    grp_fu_1561_p1 <= ap_const_lv31_136E(13 - 1 downto 0);

    grp_load_fu_245_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1057_fu_840_p2, ap_CS_fsm_state9, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, r_V_1_fu_182, ap_sig_allocacmp_r_V_1_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_load_fu_245_p1 <= r_V_1_fu_182;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1057_fu_840_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_load_fu_245_p1 <= ap_sig_allocacmp_r_V_1_load_1;
        else 
            grp_load_fu_245_p1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_V_cast_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_fu_194),64));
    icmp_ln1000_fu_1268_p2 <= "0" when (p_Result_13_fu_1263_p2 = ap_const_lv17_0) else "1";
    icmp_ln1002_fu_1183_p2 <= "0" when (and_ln1002_fu_1178_p2 = ap_const_lv34_0) else "1";
    icmp_ln1007_fu_1202_p2 <= "1" when (signed(lsb_index_reg_1810) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1011_fu_1312_p2 <= "1" when (signed(lsb_index_1_fu_1227_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1057_fu_840_p2 <= "1" when (i_V_fu_194 = ap_const_lv5_10) else "0";
    icmp_ln1547_fu_860_p2 <= "1" when (signed(ap_sig_allocacmp_y_i_V_2_load) > signed(ap_const_lv17_0)) else "0";
    icmp_ln580_1_fu_322_p2 <= "1" when (trunc_ln564_1_fu_296_p1 = ap_const_lv63_0) else "0";
    icmp_ln580_fu_286_p2 <= "1" when (trunc_ln564_fu_260_p1 = ap_const_lv63_0) else "0";
    icmp_ln590_1_fu_535_p2 <= "1" when (signed(F2_1_fu_529_p2) > signed(ap_const_lv12_D)) else "0";
    icmp_ln590_fu_361_p2 <= "1" when (signed(F2_fu_355_p2) > signed(ap_const_lv12_D)) else "0";
    icmp_ln591_1_fu_561_p2 <= "1" when (F2_1_fu_529_p2 = ap_const_lv12_D) else "0";
    icmp_ln591_fu_387_p2 <= "1" when (F2_fu_355_p2 = ap_const_lv12_D) else "0";
    icmp_ln594_1_fu_571_p2 <= "1" when (unsigned(sh_amt_1_fu_553_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln594_fu_397_p2 <= "1" when (unsigned(sh_amt_fu_379_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln612_1_fu_577_p2 <= "1" when (unsigned(sh_amt_1_fu_553_p3) < unsigned(ap_const_lv12_11)) else "0";
    icmp_ln612_fu_403_p2 <= "1" when (unsigned(sh_amt_fu_379_p3) < unsigned(ap_const_lv12_11)) else "0";
    icmp_ln988_1_fu_1071_p2 <= "1" when (theta_i_V_fu_190 = ap_const_lv17_0) else "0";
    icmp_ln988_fu_974_p2 <= "1" when (grp_fu_1561_p2 = ap_const_lv31_0) else "0";
    icmp_ln999_1_fu_1242_p2 <= "1" when (signed(tmp_14_fu_1232_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln999_fu_1143_p2 <= "1" when (signed(tmp_10_reg_1817) > signed(ap_const_lv31_0)) else "0";
    ireg_1_fu_292_p1 <= grp_fu_241_p1;
    ireg_fu_256_p1 <= grp_fu_237_p1;
    
    l_1_fu_1117_p3_proc : process(p_Result_26_fu_1109_p3)
    begin
        l_1_fu_1117_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_26_fu_1109_p3(i) = '1' then
                l_1_fu_1117_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    l_fu_1029_p1 <= tmp_fu_1021_p3(32 - 1 downto 0);
    lsb_index_1_fu_1227_p2 <= std_logic_vector(unsigned(sub_ln997_1_reg_1855) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_1039_p2 <= std_logic_vector(unsigned(sub_ln997_fu_1033_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln1000_1_fu_1257_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv17_1FFFF),to_integer(unsigned('0' & zext_ln1000_1_fu_1253_p1(17-1 downto 0)))));
    lshr_ln1000_fu_1157_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv34_3FFFFFFFF),to_integer(unsigned('0' & zext_ln1000_fu_1153_p1(31-1 downto 0)))));
    lshr_ln1007_fu_1347_p2 <= std_logic_vector(shift_right(unsigned(sext_ln990_reg_1797),to_integer(unsigned('0' & zext_ln1007_fu_1343_p1(31-1 downto 0)))));
    lshr_ln1011_fu_1402_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1010_fu_1390_p1),to_integer(unsigned('0' & zext_ln1011_fu_1398_p1(31-1 downto 0)))));
    m_1_fu_1366_p2 <= std_logic_vector(unsigned(zext_ln1004_fu_1359_p1) + unsigned(zext_ln1014_fu_1363_p1));
    m_4_fu_1423_p3 <= 
        lshr_ln1011_fu_1402_p2 when (icmp_ln1011_reg_1887(0) = '1') else 
        shl_ln1012_fu_1417_p2;
    m_5_fu_1433_p2 <= std_logic_vector(unsigned(m_4_fu_1423_p3) + unsigned(zext_ln1014_1_fu_1430_p1));
    m_fu_1352_p3 <= 
        lshr_ln1007_fu_1347_p2 when (icmp_ln1007_reg_1877(0) = '1') else 
        shl_ln1008_fu_1333_p2;
    man_V_1_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln578_fu_338_p1));
    man_V_2_fu_348_p3 <= 
        man_V_1_fu_342_p2 when (p_Result_17_reg_1610(0) = '1') else 
        zext_ln578_fu_338_p1;
    man_V_4_fu_516_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln578_1_fu_512_p1));
    man_V_5_fu_522_p3 <= 
        man_V_4_fu_516_p2 when (p_Result_19_reg_1632(0) = '1') else 
        zext_ln578_1_fu_512_p1;
    or_ln1002_1_fu_1172_p2 <= (shl_ln1002_fu_1166_p2 or lshr_ln1000_fu_1157_p2);
    or_ln590_1_fu_658_p2 <= (or_ln591_1_fu_621_p2 or icmp_ln590_1_fu_535_p2);
    or_ln590_fu_484_p2 <= (or_ln591_fu_447_p2 or icmp_ln590_fu_361_p2);
    or_ln591_1_fu_621_p2 <= (icmp_ln591_1_fu_561_p2 or icmp_ln580_1_reg_1647);
    or_ln591_fu_447_p2 <= (icmp_ln591_fu_387_p2 or icmp_ln580_reg_1625);
    
    p_Result_11_fu_1099_p4_proc : process(tmp_V_5_fu_1091_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_11_fu_1099_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_1091_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for p_Result_11_fu_1099_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_11_fu_1099_p4_i) := tmp_V_5_fu_1091_p3(17-1-p_Result_11_fu_1099_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_11_fu_1099_p4 <= resvalue(17-1 downto 0);
    end process;

    p_Result_13_fu_1263_p2 <= (tmp_V_5_reg_1848 and lshr_ln1000_1_fu_1257_p2);
    p_Result_14_fu_1299_p3 <= tmp_V_5_reg_1848(to_integer(unsigned(add_ln1002_fu_1294_p2)) downto to_integer(unsigned(add_ln1002_fu_1294_p2))) when (to_integer(unsigned(add_ln1002_fu_1294_p2))>= 0 and to_integer(unsigned(add_ln1002_fu_1294_p2))<=16) else "-";
    p_Result_18_fu_331_p3 <= (ap_const_lv1_1 & trunc_ln574_reg_1620);
    p_Result_20_fu_505_p3 <= (ap_const_lv1_1 & trunc_ln574_1_reg_1642);
    p_Result_21_fu_979_p3 <= grp_fu_1561_p2(30 downto 30);
    p_Result_22_fu_1013_p3 <= (ap_const_lv30_3FFFFFFF & p_Result_s_fu_1003_p4);
    p_Result_23_fu_1059_p3 <= sext_ln990_fu_1000_p1(to_integer(unsigned(lsb_index_fu_1039_p2)) downto to_integer(unsigned(lsb_index_fu_1039_p2))) when (to_integer(unsigned(lsb_index_fu_1039_p2))>= 0 and to_integer(unsigned(lsb_index_fu_1039_p2))<=33) else "-";
    p_Result_24_fu_1485_p5 <= (zext_ln1004_1_fu_1457_p1(63 downto 32) & tmp_3_fu_1478_p3 & zext_ln1004_1_fu_1457_p1(22 downto 0));
    p_Result_25_fu_1077_p3 <= theta_i_V_fu_190(16 downto 16);
    p_Result_26_fu_1109_p3 <= (ap_const_lv15_7FFF & p_Result_11_fu_1099_p4);
    p_Result_27_fu_1537_p5 <= (zext_ln1015_fu_1509_p1(63 downto 32) & tmp_4_fu_1530_p3 & zext_ln1015_fu_1509_p1(22 downto 0));
    
    p_Result_s_fu_1003_p4_proc : process(sext_ln990_fu_1000_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(34+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(34+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(34 - 1 downto 0);
    variable p_Result_s_fu_1003_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(34 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(34 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(34 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_21(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := sext_ln990_fu_1000_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(34-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(34-1-unsigned(ap_const_lv32_21(6-1 downto 0)));
            for p_Result_s_fu_1003_p4_i in 0 to 34-1 loop
                v0_cpy(p_Result_s_fu_1003_p4_i) := sext_ln990_fu_1000_p1(34-1-p_Result_s_fu_1003_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(34-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_1003_p4 <= resvalue(34-1 downto 0);
    end process;

    r <= 
        ap_const_lv32_0 when (icmp_ln988_reg_1782(0) = '1') else 
        LD_2_fu_1497_p1;
    r_1_fu_874_p2 <= std_logic_vector(shift_right(signed(ap_sig_allocacmp_y_i_V_2_load),to_integer(unsigned('0' & zext_ln1386_fu_870_p1(17-1 downto 0)))));
    r_2_fu_880_p2 <= std_logic_vector(shift_right(signed(grp_load_fu_245_p1),to_integer(unsigned('0' & zext_ln1386_fu_870_p1(17-1 downto 0)))));

    r_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_ap_vld <= ap_const_logic_1;
        else 
            r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1007_fu_1219_p3 <= 
        select_ln999_fu_1212_p3 when (icmp_ln1007_fu_1202_p2(0) = '1') else 
        and_ln1002_1_fu_1207_p2;
    select_ln1548_fu_800_p3 <= 
        ap_const_lv17_6487 when (tmp_8_fu_792_p3(0) = '1') else 
        ap_const_lv17_0;
    select_ln591_1_fu_613_p3 <= 
        trunc_ln592_1_fu_567_p1 when (and_ln591_1_fu_607_p2(0) = '1') else 
        ap_const_lv17_0;
    select_ln591_fu_439_p3 <= 
        trunc_ln592_fu_393_p1 when (and_ln591_fu_433_p2(0) = '1') else 
        ap_const_lv17_0;
    select_ln594_1_fu_696_p3 <= 
        trunc_ln595_fu_688_p1 when (and_ln594_1_fu_692_p2(0) = '1') else 
        select_ln594_reg_1679;
    select_ln594_2_fu_650_p3 <= 
        select_ln597_1_fu_594_p3 when (and_ln594_2_fu_644_p2(0) = '1') else 
        select_ln591_1_fu_613_p3;
    select_ln594_3_fu_723_p3 <= 
        trunc_ln595_1_fu_715_p1 when (and_ln594_3_fu_719_p2(0) = '1') else 
        select_ln594_2_reg_1714;
    select_ln594_fu_476_p3 <= 
        select_ln597_fu_420_p3 when (and_ln594_fu_470_p2(0) = '1') else 
        select_ln591_fu_439_p3;
    select_ln597_1_fu_594_p3 <= 
        ap_const_lv17_1FFFF when (tmp_6_fu_586_p3(0) = '1') else 
        ap_const_lv17_0;
    select_ln597_fu_420_p3 <= 
        ap_const_lv17_1FFFF when (tmp_2_fu_412_p3(0) = '1') else 
        ap_const_lv17_0;
    select_ln612_1_fu_759_p3 <= 
        shl_ln613_1_fu_754_p2 when (and_ln612_1_reg_1719(0) = '1') else 
        select_ln594_3_reg_1739;
    select_ln612_fu_738_p3 <= 
        shl_ln613_fu_733_p2 when (and_ln612_reg_1684(0) = '1') else 
        select_ln594_1_reg_1729;
    select_ln996_1_fu_1512_p3 <= 
        ap_const_lv8_7F when (p_Result_15_reg_1912(0) = '1') else 
        ap_const_lv8_7E;
    select_ln996_fu_1460_p3 <= 
        ap_const_lv8_7F when (p_Result_8_reg_1902(0) = '1') else 
        ap_const_lv8_7E;
    select_ln999_fu_1212_p3 <= 
        icmp_ln1002_fu_1183_p2 when (icmp_ln999_fu_1143_p2(0) = '1') else 
        p_Result_23_reg_1827;
        sext_ln590_1_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_1694),32));

    sext_ln590_1cast_fu_751_p1 <= sext_ln590_1_reg_1734(17 - 1 downto 0);
        sext_ln590_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1659),32));

    sext_ln590cast_fu_730_p1 <= sext_ln590_reg_1724(17 - 1 downto 0);
        sext_ln990_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_4_reg_1792),34));

    sh_amt_1_fu_553_p3 <= 
        add_ln590_1_fu_541_p2 when (icmp_ln590_1_fu_535_p2(0) = '1') else 
        sub_ln590_1_fu_547_p2;
    sh_amt_fu_379_p3 <= 
        add_ln590_fu_367_p2 when (icmp_ln590_fu_361_p2(0) = '1') else 
        sub_ln590_fu_373_p2;
    sh_fu_866_p1 <= i_V_fu_194(4 - 1 downto 0);
    shl_ln1002_fu_1166_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv34_1),to_integer(unsigned('0' & zext_ln1002_fu_1163_p1(31-1 downto 0)))));
    shl_ln1008_fu_1333_p2 <= std_logic_vector(shift_left(unsigned(sext_ln990_reg_1797),to_integer(unsigned('0' & zext_ln1008_fu_1329_p1(31-1 downto 0)))));
    shl_ln1012_fu_1417_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1010_fu_1390_p1),to_integer(unsigned('0' & zext_ln1012_fu_1413_p1(31-1 downto 0)))));
    shl_ln613_1_fu_754_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln592_1_reg_1699),to_integer(unsigned('0' & sext_ln590_1cast_fu_751_p1(17-1 downto 0)))));
    shl_ln613_fu_733_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln592_reg_1664),to_integer(unsigned('0' & sext_ln590cast_fu_730_p1(17-1 downto 0)))));
    sub_ln1000_1_fu_1248_p2 <= std_logic_vector(unsigned(ap_const_lv5_A) - unsigned(trunc_ln1000_1_reg_1867));
    sub_ln1000_fu_1148_p2 <= std_logic_vector(signed(ap_const_lv6_3B) - signed(trunc_ln1000_reg_1822));
    sub_ln1008_fu_1324_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln997_reg_1804));
    sub_ln1012_fu_1408_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln997_1_reg_1855));
    sub_ln1017_1_fu_1519_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) - unsigned(trunc_ln996_1_reg_1872));
    sub_ln1017_fu_1467_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln996_reg_1833));
    sub_ln590_1_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv12_D) - unsigned(F2_1_fu_529_p2));
    sub_ln590_fu_373_p2 <= std_logic_vector(unsigned(ap_const_lv12_D) - unsigned(F2_fu_355_p2));
    sub_ln997_1_fu_1125_p2 <= std_logic_vector(unsigned(ap_const_lv32_11) - unsigned(l_1_fu_1117_p3));
    sub_ln997_fu_1033_p2 <= std_logic_vector(unsigned(ap_const_lv32_22) - unsigned(l_fu_1029_p1));
    theta <= 
        ap_const_lv32_0 when (icmp_ln988_1_reg_1838(0) = '1') else 
        LD_3_fu_1549_p1;

    theta_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            theta_ap_vld <= ap_const_logic_1;
        else 
            theta_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    theta_i_V_1_fu_935_p2 <= std_logic_vector(unsigned(zext_ln1452_fu_931_p1) + unsigned(theta_i_V_fu_190));
    theta_i_V_2_fu_941_p2 <= std_logic_vector(unsigned(theta_i_V_fu_190) - unsigned(zext_ln1452_fu_931_p1));
    theta_i_V_3_fu_947_p3 <= 
        theta_i_V_1_fu_935_p2 when (icmp_ln1547_reg_1757(0) = '1') else 
        theta_i_V_2_fu_941_p2;
    tmp_11_fu_1189_p3 <= lsb_index_reg_1810(31 downto 31);
    tmp_14_fu_1232_p4 <= lsb_index_1_fu_1227_p2(31 downto 1);
    tmp_15_fu_1274_p3 <= lsb_index_1_fu_1227_p2(31 downto 31);
    tmp_2_fu_412_p3 <= bitcast_ln709_fu_409_p1(31 downto 31);
    tmp_3_fu_1478_p3 <= (p_Result_21_reg_1787 & add_ln1017_fu_1472_p2);
    tmp_4_fu_1530_p3 <= (p_Result_25_reg_1843 & add_ln1017_1_fu_1524_p2);
    tmp_6_fu_586_p3 <= bitcast_ln709_2_fu_583_p1(31 downto 31);
    tmp_7_fu_772_p3 <= x_i_V_fu_744_p3(16 downto 16);
    tmp_8_fu_792_p3 <= x_i_V_fu_744_p3(16 downto 16);
    tmp_V_2_fu_1085_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(theta_i_V_fu_190));
    tmp_V_4_fu_992_p3 <= 
        tmp_V_fu_986_p2 when (p_Result_21_fu_979_p3(0) = '1') else 
        trunc_ln1168_fu_971_p1;
    tmp_V_5_fu_1091_p3 <= 
        tmp_V_2_fu_1085_p2 when (p_Result_25_fu_1077_p3(0) = '1') else 
        theta_i_V_fu_190;
    tmp_V_fu_986_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(trunc_ln1168_fu_971_p1));
    
    tmp_fu_1021_p3_proc : process(p_Result_22_fu_1013_p3)
    begin
        tmp_fu_1021_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_22_fu_1013_p3(i) = '1' then
                tmp_fu_1021_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tobool34_i_i663_fu_1318_p2 <= (xor_ln1002_1_fu_1282_p2 and a_1_fu_1306_p2);
    trunc_ln1000_1_fu_1135_p1 <= sub_ln997_1_fu_1125_p2(5 - 1 downto 0);
    trunc_ln1000_fu_1055_p1 <= sub_ln997_fu_1033_p2(6 - 1 downto 0);
    trunc_ln1168_fu_971_p1 <= grp_fu_1561_p2(30 - 1 downto 0);
    trunc_ln564_1_fu_296_p1 <= ireg_1_fu_292_p1(63 - 1 downto 0);
    trunc_ln564_fu_260_p1 <= ireg_fu_256_p1(63 - 1 downto 0);
    trunc_ln574_1_fu_318_p1 <= ireg_1_fu_292_p1(52 - 1 downto 0);
    trunc_ln574_fu_282_p1 <= ireg_fu_256_p1(52 - 1 downto 0);
    trunc_ln592_1_fu_567_p1 <= man_V_5_fu_522_p3(17 - 1 downto 0);
    trunc_ln592_fu_393_p1 <= man_V_2_fu_348_p3(17 - 1 downto 0);
    trunc_ln595_1_fu_715_p1 <= ashr_ln595_1_fu_710_p2(17 - 1 downto 0);
    trunc_ln595_fu_688_p1 <= ashr_ln595_fu_683_p2(17 - 1 downto 0);
    trunc_ln996_1_fu_1139_p1 <= l_1_fu_1117_p3(8 - 1 downto 0);
    trunc_ln996_fu_1067_p1 <= tmp_fu_1021_p3(8 - 1 downto 0);
    trunc_ln997_fu_1131_p1 <= sub_ln997_1_fu_1125_p2(17 - 1 downto 0);
    x_i_V_1_fu_780_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(x_i_V_fu_744_p3));
    x_i_V_2_fu_816_p3 <= 
        x_i_V_1_fu_780_p2 when (tmp_7_fu_772_p3(0) = '1') else 
        x_i_V_fu_744_p3;
    x_i_V_3_fu_886_p2 <= std_logic_vector(unsigned(r_1_fu_874_p2) + unsigned(grp_load_fu_245_p1));
    x_i_V_4_fu_898_p2 <= std_logic_vector(signed(grp_load_fu_245_p1) - signed(r_1_fu_874_p2));
    x_i_V_5_fu_910_p3 <= 
        x_i_V_3_fu_886_p2 when (icmp_ln1547_fu_860_p2(0) = '1') else 
        x_i_V_4_fu_898_p2;
    x_i_V_fu_744_p3 <= 
        ap_const_lv17_0 when (icmp_ln580_reg_1625(0) = '1') else 
        select_ln612_fu_738_p3;
    xor_ln1002_1_fu_1282_p2 <= (tmp_15_fu_1274_p3 xor ap_const_lv1_1);
    xor_ln1002_fu_1196_p2 <= (tmp_11_fu_1189_p3 xor ap_const_lv1_1);
    xor_ln580_1_fu_602_p2 <= (icmp_ln580_1_reg_1647 xor ap_const_lv1_1);
    xor_ln580_fu_428_p2 <= (icmp_ln580_reg_1625 xor ap_const_lv1_1);
    xor_ln590_1_fu_664_p2 <= (or_ln590_1_fu_658_p2 xor ap_const_lv1_1);
    xor_ln590_fu_490_p2 <= (or_ln590_fu_484_p2 xor ap_const_lv1_1);
    xor_ln591_1_fu_626_p2 <= (or_ln591_1_fu_621_p2 xor ap_const_lv1_1);
    xor_ln591_fu_452_p2 <= (or_ln591_fu_447_p2 xor ap_const_lv1_1);
    xor_ln594_1_fu_638_p2 <= (icmp_ln594_1_fu_571_p2 xor ap_const_lv1_1);
    xor_ln594_fu_464_p2 <= (icmp_ln594_fu_397_p2 xor ap_const_lv1_1);
    y_i_V_10_fu_904_p2 <= std_logic_vector(unsigned(r_2_fu_880_p2) + unsigned(ap_sig_allocacmp_y_i_V_2_load));
    y_i_V_11_fu_918_p3 <= 
        y_i_V_9_fu_892_p2 when (icmp_ln1547_fu_860_p2(0) = '1') else 
        y_i_V_10_fu_904_p2;
    y_i_V_7_fu_786_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(y_i_V_fu_765_p3));
    y_i_V_8_fu_808_p3 <= 
        y_i_V_7_fu_786_p2 when (tmp_7_fu_772_p3(0) = '1') else 
        y_i_V_fu_765_p3;
    y_i_V_9_fu_892_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_y_i_V_2_load) - unsigned(r_2_fu_880_p2));
    y_i_V_fu_765_p3 <= 
        ap_const_lv17_0 when (icmp_ln580_1_reg_1647(0) = '1') else 
        select_ln612_1_fu_759_p3;
    zext_ln1000_1_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1000_1_fu_1248_p2),17));
    zext_ln1000_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1000_fu_1148_p2),34));
    zext_ln1002_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_reg_1810),34));
    zext_ln1004_1_fu_1457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_9_reg_1897),64));
    zext_ln1004_fu_1359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_fu_1352_p3),35));
    zext_ln1007_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1007_fu_1338_p2),34));
    zext_ln1008_fu_1329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1008_fu_1324_p2),34));
    zext_ln1010_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1848),64));
    zext_ln1011_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1011_fu_1393_p2),64));
    zext_ln1012_fu_1413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1012_fu_1408_p2),64));
    zext_ln1014_1_fu_1430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tobool34_i_i663_reg_1892),64));
    zext_ln1014_fu_1363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1007_reg_1882),35));
    zext_ln1015_fu_1509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_8_reg_1907),64));
    zext_ln1386_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_fu_866_p1),17));
    zext_ln1452_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(angles_V_q0),17));
    zext_ln494_1_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_1_reg_1637),12));
    zext_ln494_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_1615),12));
    zext_ln578_1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_20_fu_505_p3),54));
    zext_ln578_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_18_fu_331_p3),54));
    zext_ln595_1_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln590_1_fu_703_p1),54));
    zext_ln595_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln590_fu_676_p1),54));
end behav;
