// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordiccart2pol_cordiccart2pol,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=160,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1647,HLS_SYN_LUT=2708,HLS_VERSION=2021_1_1}" *)

module cordiccart2pol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        y,
        r,
        r_ap_vld,
        theta,
        theta_ap_vld
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_pp0_stage0 = 23'd8;
parameter    ap_ST_fsm_pp0_stage1 = 23'd16;
parameter    ap_ST_fsm_pp0_stage2 = 23'd32;
parameter    ap_ST_fsm_pp0_stage3 = 23'd64;
parameter    ap_ST_fsm_pp0_stage4 = 23'd128;
parameter    ap_ST_fsm_pp0_stage5 = 23'd256;
parameter    ap_ST_fsm_pp0_stage6 = 23'd512;
parameter    ap_ST_fsm_pp0_stage7 = 23'd1024;
parameter    ap_ST_fsm_pp0_stage8 = 23'd2048;
parameter    ap_ST_fsm_state16 = 23'd4096;
parameter    ap_ST_fsm_state17 = 23'd8192;
parameter    ap_ST_fsm_state18 = 23'd16384;
parameter    ap_ST_fsm_state19 = 23'd32768;
parameter    ap_ST_fsm_state20 = 23'd65536;
parameter    ap_ST_fsm_state21 = 23'd131072;
parameter    ap_ST_fsm_state22 = 23'd262144;
parameter    ap_ST_fsm_state23 = 23'd524288;
parameter    ap_ST_fsm_state24 = 23'd1048576;
parameter    ap_ST_fsm_state25 = 23'd2097152;
parameter    ap_ST_fsm_state26 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
input  [31:0] y;
output  [31:0] r;
output   r_ap_vld;
output  [31:0] theta;
output   theta_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_ap_vld;
reg theta_ap_vld;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] Kvalues_address0;
reg    Kvalues_ce0;
wire   [31:0] Kvalues_q0;
wire   [3:0] angles_address0;
reg    angles_ce0;
wire   [31:0] angles_q0;
reg   [31:0] grp_load_fu_179_p1;
reg   [31:0] reg_184;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln22_reg_496;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_146_p2;
reg   [31:0] reg_191;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state10_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] and_ln24_reg_536;
wire   [31:0] grp_fu_150_p2;
reg   [31:0] reg_195;
wire   [0:0] grp_fu_168_p2;
reg   [0:0] tmp_1_reg_491;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln22_fu_326_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] Kvalues_load_reg_510;
reg   [31:0] angles_load_reg_516;
reg   [31:0] y_assign_2_load_reg_522;
wire   [0:0] and_ln24_fu_393_p2;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state9_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] mul1_reg_543;
wire   [31:0] grp_fu_158_p2;
reg   [31:0] mul2_reg_548;
wire   [63:0] grp_fu_165_p1;
reg   [63:0] conv_reg_553;
wire    ap_CS_fsm_state17;
wire   [63:0] grp_fu_174_p2;
reg   [63:0] mul_reg_558;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_state12_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage2_subdone;
wire   [63:0] i_cast_fu_338_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] y_assign_2_fu_74;
wire   [31:0] select_ln24_1_fu_420_p3;
reg   [31:0] ap_sig_allocacmp_y_assign_2_load;
wire    ap_block_pp0_stage2;
wire   [31:0] select_ln15_2_fu_284_p3;
reg   [31:0] x_temp_fu_78;
wire   [31:0] select_ln24_2_fu_427_p3;
reg   [31:0] ap_sig_allocacmp_x_temp_load;
wire   [31:0] select_ln15_3_fu_292_p3;
reg   [31:0] empty_fu_82;
wire   [31:0] select_ln24_fu_399_p3;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state11_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] select_ln15_1_fu_276_p3;
reg   [4:0] i_fu_86;
wire   [4:0] add_ln22_fu_332_p2;
reg   [31:0] storemerge_fu_90;
wire   [31:0] bitcast_ln27_fu_406_p1;
wire   [31:0] select_ln15_fu_268_p3;
wire    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state26;
reg   [31:0] grp_fu_146_p0;
reg   [31:0] grp_fu_146_p1;
wire    ap_block_pp0_stage6;
reg   [31:0] grp_fu_150_p0;
reg   [31:0] grp_fu_150_p1;
wire    ap_CS_fsm_state25;
reg   [31:0] grp_fu_168_p0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_state18;
wire   [31:0] bitcast_ln15_fu_204_p1;
wire   [7:0] tmp_fu_207_p4;
wire   [22:0] trunc_ln15_fu_217_p1;
wire   [0:0] icmp_ln15_1_fu_227_p2;
wire   [0:0] icmp_ln15_fu_221_p2;
wire   [0:0] or_ln15_fu_233_p2;
wire   [31:0] xor_ln16_fu_244_p2;
wire   [31:0] bitcast_ln17_fu_254_p1;
wire   [31:0] xor_ln17_fu_258_p2;
wire   [0:0] and_ln15_fu_239_p2;
wire   [31:0] bitcast_ln17_1_fu_264_p1;
wire   [31:0] bitcast_ln16_fu_250_p1;
wire    ap_block_pp0_stage5;
wire   [31:0] bitcast_ln24_fu_358_p1;
wire   [7:0] tmp_2_fu_361_p4;
wire   [22:0] trunc_ln24_fu_371_p1;
wire   [0:0] icmp_ln24_1_fu_381_p2;
wire   [0:0] icmp_ln24_fu_375_p2;
wire   [0:0] or_ln24_fu_387_p2;
wire    ap_block_pp0_stage7;
wire   [31:0] grp_fu_162_p1;
reg   [1:0] grp_fu_146_opcode;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage6_00001;
reg   [1:0] grp_fu_150_opcode;
reg   [4:0] grp_fu_168_opcode;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_00001;
reg   [22:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cordiccart2pol_Kvalues #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Kvalues_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Kvalues_address0),
    .ce0(Kvalues_ce0),
    .q0(Kvalues_q0)
);

cordiccart2pol_angles #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
angles_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(angles_address0),
    .ce0(angles_ce0),
    .q0(angles_q0)
);

cordiccart2pol_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_146_p0),
    .din1(grp_fu_146_p1),
    .opcode(grp_fu_146_opcode),
    .ce(1'b1),
    .dout(grp_fu_146_p2)
);

cordiccart2pol_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_150_p0),
    .din1(grp_fu_150_p1),
    .opcode(grp_fu_150_opcode),
    .ce(1'b1),
    .dout(grp_fu_150_p2)
);

cordiccart2pol_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_y_assign_2_load),
    .din1(Kvalues_load_reg_510),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

cordiccart2pol_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_load_fu_179_p1),
    .din1(Kvalues_load_reg_510),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

cordiccart2pol_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_558),
    .ce(1'b1),
    .dout(grp_fu_162_p1)
);

cordiccart2pol_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_load_fu_179_p1),
    .ce(1'b1),
    .dout(grp_fu_165_p1)
);

cordiccart2pol_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_168_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_168_opcode),
    .dout(grp_fu_168_p2)
);

cordiccart2pol_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_553),
    .din1(64'd4603644390932755146),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_fu_82 <= select_ln15_1_fu_276_p3;
    end else if (((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        empty_fu_82 <= select_ln24_fu_399_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_86 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln22_fu_326_p2 == 1'd0))) begin
        i_fu_86 <= add_ln22_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        storemerge_fu_90 <= select_ln15_fu_268_p3;
    end else if (((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        storemerge_fu_90 <= bitcast_ln27_fu_406_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_temp_fu_78 <= select_ln15_3_fu_292_p3;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_temp_fu_78 <= select_ln24_2_fu_427_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_assign_2_fu_74 <= select_ln15_2_fu_284_p3;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        y_assign_2_fu_74 <= select_ln24_1_fu_420_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Kvalues_load_reg_510 <= Kvalues_q0;
        angles_load_reg_516 <= angles_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        and_ln24_reg_536 <= and_ln24_fu_393_p2;
        mul1_reg_543 <= grp_fu_154_p2;
        mul2_reg_548 <= grp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_reg_553 <= grp_fu_165_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln22_reg_496 <= icmp_ln22_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_reg_558 <= grp_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_184 <= grp_load_fu_179_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'd0 == and_ln24_reg_536) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln24_reg_536) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        reg_191 <= grp_fu_146_p2;
        reg_195 <= grp_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_1_reg_491 <= grp_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        y_assign_2_load_reg_522 <= ap_sig_allocacmp_y_assign_2_load;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Kvalues_ce0 = 1'b1;
    end else begin
        Kvalues_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        angles_ce0 = 1'b1;
    end else begin
        angles_ce0 = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln22_fu_326_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_sig_allocacmp_x_temp_load = select_ln24_2_fu_427_p3;
    end else begin
        ap_sig_allocacmp_x_temp_load = x_temp_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_sig_allocacmp_y_assign_2_load = select_ln24_1_fu_420_p3;
    end else begin
        ap_sig_allocacmp_y_assign_2_load = y_assign_2_fu_74;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln24_reg_536) & (icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_146_opcode = 2'd1;
    end else if ((((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln24_reg_536)) | ((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage2_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_146_opcode = 2'd0;
    end else begin
        grp_fu_146_opcode = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln24_reg_536)) | ((1'd0 == and_ln24_reg_536) & (icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_146_p0 = reg_184;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_146_p0 = empty_fu_82;
    end else begin
        grp_fu_146_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln24_reg_536)) | ((1'd0 == and_ln24_reg_536) & (icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_146_p1 = mul1_reg_543;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_146_p1 = angles_load_reg_516;
    end else begin
        grp_fu_146_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln24_reg_536)) | ((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage2_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_150_opcode = 2'd1;
    end else if (((1'd0 == and_ln24_reg_536) & (icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_150_opcode = 2'd0;
    end else begin
        grp_fu_150_opcode = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln24_reg_536)) | ((1'd0 == and_ln24_reg_536) & (icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_150_p0 = y_assign_2_load_reg_522;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_150_p0 = empty_fu_82;
    end else begin
        grp_fu_150_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln24_reg_536)) | ((1'd0 == and_ln24_reg_536) & (icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_150_p1 = mul2_reg_548;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_150_p1 = angles_load_reg_516;
    end else begin
        grp_fu_150_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage4_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_168_opcode = 5'd2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_168_opcode = 5'd4;
    end else begin
        grp_fu_168_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_168_p0 = y_assign_2_load_reg_522;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_168_p0 = x;
    end else begin
        grp_fu_168_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_load_fu_179_p1 = x_temp_fu_78;
    end else if (((icmp_ln22_reg_496 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_load_fu_179_p1 = ap_sig_allocacmp_x_temp_load;
    end else begin
        grp_load_fu_179_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        r_ap_vld = 1'b1;
    end else begin
        r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        theta_ap_vld = 1'b1;
    end else begin
        theta_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln22_fu_326_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln22_fu_326_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Kvalues_address0 = i_cast_fu_338_p1;

assign add_ln22_fu_332_p2 = (i_fu_86 + 5'd1);

assign and_ln15_fu_239_p2 = (tmp_1_reg_491 & or_ln15_fu_233_p2);

assign and_ln24_fu_393_p2 = (or_ln24_fu_387_p2 & grp_fu_168_p2);

assign angles_address0 = i_cast_fu_338_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln15_fu_204_p1 = x;

assign bitcast_ln16_fu_250_p1 = xor_ln16_fu_244_p2;

assign bitcast_ln17_1_fu_264_p1 = xor_ln17_fu_258_p2;

assign bitcast_ln17_fu_254_p1 = y;

assign bitcast_ln24_fu_358_p1 = y_assign_2_load_reg_522;

assign bitcast_ln27_fu_406_p1 = select_ln24_fu_399_p3;

assign i_cast_fu_338_p1 = i_fu_86;

assign icmp_ln15_1_fu_227_p2 = ((trunc_ln15_fu_217_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_221_p2 = ((tmp_fu_207_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_326_p2 = ((i_fu_86 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_381_p2 = ((trunc_ln24_fu_371_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_375_p2 = ((tmp_2_fu_361_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln15_fu_233_p2 = (icmp_ln15_fu_221_p2 | icmp_ln15_1_fu_227_p2);

assign or_ln24_fu_387_p2 = (icmp_ln24_fu_375_p2 | icmp_ln24_1_fu_381_p2);

assign r = grp_fu_162_p1;

assign select_ln15_1_fu_276_p3 = ((and_ln15_fu_239_p2[0:0] == 1'b1) ? 32'd1078530011 : 32'd0);

assign select_ln15_2_fu_284_p3 = ((and_ln15_fu_239_p2[0:0] == 1'b1) ? bitcast_ln17_1_fu_264_p1 : y);

assign select_ln15_3_fu_292_p3 = ((and_ln15_fu_239_p2[0:0] == 1'b1) ? bitcast_ln16_fu_250_p1 : x);

assign select_ln15_fu_268_p3 = ((and_ln15_fu_239_p2[0:0] == 1'b1) ? 32'd1078530011 : 32'd0);

assign select_ln24_1_fu_420_p3 = ((and_ln24_reg_536[0:0] == 1'b1) ? reg_195 : reg_195);

assign select_ln24_2_fu_427_p3 = ((and_ln24_reg_536[0:0] == 1'b1) ? reg_191 : reg_191);

assign select_ln24_fu_399_p3 = ((and_ln24_reg_536[0:0] == 1'b1) ? reg_191 : reg_195);

assign theta = storemerge_fu_90;

assign tmp_2_fu_361_p4 = {{bitcast_ln24_fu_358_p1[30:23]}};

assign tmp_fu_207_p4 = {{bitcast_ln15_fu_204_p1[30:23]}};

assign trunc_ln15_fu_217_p1 = bitcast_ln15_fu_204_p1[22:0];

assign trunc_ln24_fu_371_p1 = bitcast_ln24_fu_358_p1[22:0];

assign xor_ln16_fu_244_p2 = (bitcast_ln15_fu_204_p1 ^ 32'd2147483648);

assign xor_ln17_fu_258_p2 = (bitcast_ln17_fu_254_p1 ^ 32'd2147483648);

endmodule //cordiccart2pol
