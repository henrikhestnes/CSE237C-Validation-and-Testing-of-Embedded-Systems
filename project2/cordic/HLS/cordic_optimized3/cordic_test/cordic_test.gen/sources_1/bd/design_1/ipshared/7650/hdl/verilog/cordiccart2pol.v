// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordiccart2pol_cordiccart2pol,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=253,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1866,HLS_SYN_LUT=2908,HLS_VERSION=2021_1_1}" *)

module cordiccart2pol (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] y;
wire   [31:0] r;
reg    r_ap_vld;
reg    theta_ap_vld;
wire   [4:0] Kvalues_address0;
reg    Kvalues_ce0;
wire   [31:0] Kvalues_q0;
wire   [4:0] angles_address0;
reg    angles_ce0;
wire   [31:0] angles_q0;
reg   [31:0] reg_190;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln22_fu_343_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] reg_197;
wire    ap_CS_fsm_state12;
reg   [0:0] and_ln25_reg_526;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] reg_201;
reg   [31:0] y_read_reg_481;
reg   [31:0] x_read_reg_487;
wire   [0:0] grp_fu_174_p2;
reg   [0:0] tmp_1_reg_494;
wire    ap_CS_fsm_state2;
reg   [31:0] Kvalues_load_reg_512;
wire    ap_CS_fsm_state5;
reg   [31:0] angles_load_reg_518;
wire   [0:0] and_ln25_fu_400_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] mul1_reg_535;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_164_p2;
reg   [31:0] mul2_reg_540;
wire   [63:0] grp_fu_171_p1;
reg   [63:0] conv_reg_545;
wire    ap_CS_fsm_state16;
wire   [63:0] grp_fu_180_p2;
reg   [63:0] mul_reg_550;
wire    ap_CS_fsm_state23;
wire   [63:0] zext_ln22_fu_337_p1;
reg   [31:0] y_assign_2_fu_80;
wire   [31:0] select_ln25_1_fu_424_p3;
wire    ap_CS_fsm_state15;
wire   [31:0] select_ln15_2_fu_296_p3;
wire    ap_CS_fsm_state3;
reg   [31:0] x_temp_fu_84;
wire   [31:0] grp_fu_205_p3;
wire   [31:0] select_ln15_3_fu_303_p3;
reg   [31:0] empty_fu_88;
wire    ap_CS_fsm_state13;
wire   [31:0] select_ln15_1_fu_288_p3;
wire    ap_CS_fsm_state8;
reg   [4:0] i_fu_92;
wire   [4:0] add_ln22_fu_349_p2;
reg   [31:0] storemerge_fu_96;
wire   [31:0] bitcast_ln28_fu_410_p1;
wire   [31:0] select_ln15_fu_280_p3;
wire    ap_CS_fsm_state25;
reg   [31:0] grp_fu_152_p0;
reg   [31:0] grp_fu_152_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state24;
reg   [31:0] grp_fu_174_p0;
wire    ap_CS_fsm_state17;
wire   [31:0] bitcast_ln15_fu_217_p1;
wire   [7:0] tmp_fu_220_p4;
wire   [22:0] trunc_ln15_fu_230_p1;
wire   [0:0] icmp_ln15_1_fu_240_p2;
wire   [0:0] icmp_ln15_fu_234_p2;
wire   [0:0] or_ln15_fu_246_p2;
wire   [31:0] xor_ln16_fu_257_p2;
wire   [31:0] bitcast_ln17_fu_267_p1;
wire   [31:0] xor_ln17_fu_270_p2;
wire   [0:0] and_ln15_fu_252_p2;
wire   [31:0] bitcast_ln17_1_fu_276_p1;
wire   [31:0] bitcast_ln16_fu_263_p1;
wire   [31:0] bitcast_ln25_fu_365_p1;
wire   [7:0] tmp_2_fu_368_p4;
wire   [22:0] trunc_ln25_fu_378_p1;
wire   [0:0] icmp_ln25_1_fu_388_p2;
wire   [0:0] icmp_ln25_fu_382_p2;
wire   [0:0] or_ln25_fu_394_p2;
wire   [31:0] grp_fu_168_p1;
reg   [1:0] grp_fu_152_opcode;
reg   [1:0] grp_fu_156_opcode;
reg   [4:0] grp_fu_174_opcode;
reg   [24:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

cordiccart2pol_Kvalues #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
Kvalues_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Kvalues_address0),
    .ce0(Kvalues_ce0),
    .q0(Kvalues_q0)
);

cordiccart2pol_angles #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
angles_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(angles_address0),
    .ce0(angles_ce0),
    .q0(angles_q0)
);

cordiccart2pol_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .y(y),
    .r(r),
    .r_ap_vld(r_ap_vld),
    .theta(storemerge_fu_96),
    .theta_ap_vld(theta_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

cordiccart2pol_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_152_p0),
    .din1(grp_fu_152_p1),
    .opcode(grp_fu_152_opcode),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

cordiccart2pol_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(y_assign_2_fu_80),
    .din1(mul2_reg_540),
    .opcode(grp_fu_156_opcode),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

cordiccart2pol_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(y_assign_2_fu_80),
    .din1(Kvalues_load_reg_512),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

cordiccart2pol_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_temp_fu_84),
    .din1(Kvalues_load_reg_512),
    .ce(1'b1),
    .dout(grp_fu_164_p2)
);

cordiccart2pol_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_reg_550),
    .ce(1'b1),
    .dout(grp_fu_168_p1)
);

cordiccart2pol_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_temp_fu_84),
    .ce(1'b1),
    .dout(grp_fu_171_p1)
);

cordiccart2pol_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_174_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_174_opcode),
    .dout(grp_fu_174_p2)
);

cordiccart2pol_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv_reg_545),
    .din1(64'd4603644390932755146),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_fu_88 <= select_ln15_1_fu_288_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        empty_fu_88 <= grp_fu_205_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_92 <= 5'd0;
    end else if (((icmp_ln22_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_92 <= add_ln22_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        storemerge_fu_96 <= select_ln15_fu_280_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        storemerge_fu_96 <= bitcast_ln28_fu_410_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_temp_fu_84 <= select_ln15_3_fu_303_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        x_temp_fu_84 <= grp_fu_205_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_assign_2_fu_80 <= select_ln15_2_fu_296_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        y_assign_2_fu_80 <= select_ln25_1_fu_424_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Kvalues_load_reg_512 <= Kvalues_q0;
        angles_load_reg_518 <= angles_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        and_ln25_reg_526 <= and_ln25_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_reg_545 <= grp_fu_171_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul1_reg_535 <= grp_fu_160_p2;
        mul2_reg_540 <= grp_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        mul_reg_550 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln22_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_190 <= x_temp_fu_84;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state12)) | ((1'd0 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state14)) | ((1'd1 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state12)) | ((1'd1 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state14)))) begin
        reg_197 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state14)) | ((1'd1 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state14)))) begin
        reg_201 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_1_reg_494 <= grp_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        x_read_reg_487 <= x;
        y_read_reg_481 <= y;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Kvalues_ce0 = 1'b1;
    end else begin
        Kvalues_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        angles_ce0 = 1'b1;
    end else begin
        angles_ce0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state10)) | ((1'd0 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_152_opcode = 2'd1;
    end else if ((((1'd1 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state10)) | ((1'd1 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_152_opcode = 2'd0;
    end else begin
        grp_fu_152_opcode = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state10)) | ((1'd1 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_152_p0 = reg_190;
    end else if ((((1'd0 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state8)) | ((1'd1 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_152_p0 = empty_fu_88;
    end else begin
        grp_fu_152_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state10)) | ((1'd1 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_152_p1 = mul1_reg_535;
    end else if ((((1'd0 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state8)) | ((1'd1 == and_ln25_reg_526) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_152_p1 = angles_load_reg_518;
    end else begin
        grp_fu_152_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((1'd1 == and_ln25_reg_526)) begin
            grp_fu_156_opcode = 2'd1;
        end else if ((1'd0 == and_ln25_reg_526)) begin
            grp_fu_156_opcode = 2'd0;
        end else begin
            grp_fu_156_opcode = 'bx;
        end
    end else begin
        grp_fu_156_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_174_opcode = 5'd2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_174_opcode = 5'd4;
    end else begin
        grp_fu_174_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_174_p0 = y_assign_2_fu_80;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_174_p0 = x;
    end else begin
        grp_fu_174_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        r_ap_vld = 1'b1;
    end else begin
        r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        theta_ap_vld = 1'b1;
    end else begin
        theta_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln22_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Kvalues_address0 = zext_ln22_fu_337_p1;

assign add_ln22_fu_349_p2 = (i_fu_92 + 5'd1);

assign and_ln15_fu_252_p2 = (tmp_1_reg_494 & or_ln15_fu_246_p2);

assign and_ln25_fu_400_p2 = (or_ln25_fu_394_p2 & grp_fu_174_p2);

assign angles_address0 = zext_ln22_fu_337_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln15_fu_217_p1 = x_read_reg_487;

assign bitcast_ln16_fu_263_p1 = xor_ln16_fu_257_p2;

assign bitcast_ln17_1_fu_276_p1 = xor_ln17_fu_270_p2;

assign bitcast_ln17_fu_267_p1 = y_read_reg_481;

assign bitcast_ln25_fu_365_p1 = y_assign_2_fu_80;

assign bitcast_ln28_fu_410_p1 = grp_fu_205_p3;

assign grp_fu_205_p3 = ((and_ln25_reg_526[0:0] == 1'b1) ? reg_197 : reg_197);

assign icmp_ln15_1_fu_240_p2 = ((trunc_ln15_fu_230_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_234_p2 = ((tmp_fu_220_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_343_p2 = ((i_fu_92 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln25_1_fu_388_p2 = ((trunc_ln25_fu_378_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_382_p2 = ((tmp_2_fu_368_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln15_fu_246_p2 = (icmp_ln15_fu_234_p2 | icmp_ln15_1_fu_240_p2);

assign or_ln25_fu_394_p2 = (icmp_ln25_fu_382_p2 | icmp_ln25_1_fu_388_p2);

assign r = grp_fu_168_p1;

assign select_ln15_1_fu_288_p3 = ((and_ln15_fu_252_p2[0:0] == 1'b1) ? 32'd1078530011 : 32'd0);

assign select_ln15_2_fu_296_p3 = ((and_ln15_fu_252_p2[0:0] == 1'b1) ? bitcast_ln17_1_fu_276_p1 : y_read_reg_481);

assign select_ln15_3_fu_303_p3 = ((and_ln15_fu_252_p2[0:0] == 1'b1) ? bitcast_ln16_fu_263_p1 : x_read_reg_487);

assign select_ln15_fu_280_p3 = ((and_ln15_fu_252_p2[0:0] == 1'b1) ? 32'd1078530011 : 32'd0);

assign select_ln25_1_fu_424_p3 = ((and_ln25_reg_526[0:0] == 1'b1) ? reg_201 : reg_201);

assign tmp_2_fu_368_p4 = {{bitcast_ln25_fu_365_p1[30:23]}};

assign tmp_fu_220_p4 = {{bitcast_ln15_fu_217_p1[30:23]}};

assign trunc_ln15_fu_230_p1 = bitcast_ln15_fu_217_p1[22:0];

assign trunc_ln25_fu_378_p1 = bitcast_ln25_fu_365_p1[22:0];

assign xor_ln16_fu_257_p2 = (bitcast_ln15_fu_217_p1 ^ 32'd2147483648);

assign xor_ln17_fu_270_p2 = (bitcast_ln17_fu_267_p1 ^ 32'd2147483648);

assign zext_ln22_fu_337_p1 = i_fu_92;

endmodule //cordiccart2pol
