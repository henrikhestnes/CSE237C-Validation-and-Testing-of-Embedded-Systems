// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordiccart2pol_cordiccart2pol,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=160,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1899,HLS_SYN_LUT=3004,HLS_VERSION=2021_1_1}" *)

module cordiccart2pol (
        ap_clk,
        ap_rst_n,
        s_axi_cordic_io_AWVALID,
        s_axi_cordic_io_AWREADY,
        s_axi_cordic_io_AWADDR,
        s_axi_cordic_io_WVALID,
        s_axi_cordic_io_WREADY,
        s_axi_cordic_io_WDATA,
        s_axi_cordic_io_WSTRB,
        s_axi_cordic_io_ARVALID,
        s_axi_cordic_io_ARREADY,
        s_axi_cordic_io_ARADDR,
        s_axi_cordic_io_RVALID,
        s_axi_cordic_io_RREADY,
        s_axi_cordic_io_RDATA,
        s_axi_cordic_io_RRESP,
        s_axi_cordic_io_BVALID,
        s_axi_cordic_io_BREADY,
        s_axi_cordic_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_pp0_stage0 = 23'd8;
parameter    ap_ST_fsm_pp0_stage1 = 23'd16;
parameter    ap_ST_fsm_pp0_stage2 = 23'd32;
parameter    ap_ST_fsm_pp0_stage3 = 23'd64;
parameter    ap_ST_fsm_pp0_stage4 = 23'd128;
parameter    ap_ST_fsm_pp0_stage5 = 23'd256;
parameter    ap_ST_fsm_pp0_stage6 = 23'd512;
parameter    ap_ST_fsm_pp0_stage7 = 23'd1024;
parameter    ap_ST_fsm_pp0_stage8 = 23'd2048;
parameter    ap_ST_fsm_state16 = 23'd4096;
parameter    ap_ST_fsm_state17 = 23'd8192;
parameter    ap_ST_fsm_state18 = 23'd16384;
parameter    ap_ST_fsm_state19 = 23'd32768;
parameter    ap_ST_fsm_state20 = 23'd65536;
parameter    ap_ST_fsm_state21 = 23'd131072;
parameter    ap_ST_fsm_state22 = 23'd262144;
parameter    ap_ST_fsm_state23 = 23'd524288;
parameter    ap_ST_fsm_state24 = 23'd1048576;
parameter    ap_ST_fsm_state25 = 23'd2097152;
parameter    ap_ST_fsm_state26 = 23'd4194304;
parameter    C_S_AXI_CORDIC_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_CORDIC_IO_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CORDIC_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_cordic_io_AWVALID;
output   s_axi_cordic_io_AWREADY;
input  [C_S_AXI_CORDIC_IO_ADDR_WIDTH - 1:0] s_axi_cordic_io_AWADDR;
input   s_axi_cordic_io_WVALID;
output   s_axi_cordic_io_WREADY;
input  [C_S_AXI_CORDIC_IO_DATA_WIDTH - 1:0] s_axi_cordic_io_WDATA;
input  [C_S_AXI_CORDIC_IO_WSTRB_WIDTH - 1:0] s_axi_cordic_io_WSTRB;
input   s_axi_cordic_io_ARVALID;
output   s_axi_cordic_io_ARREADY;
input  [C_S_AXI_CORDIC_IO_ADDR_WIDTH - 1:0] s_axi_cordic_io_ARADDR;
output   s_axi_cordic_io_RVALID;
input   s_axi_cordic_io_RREADY;
output  [C_S_AXI_CORDIC_IO_DATA_WIDTH - 1:0] s_axi_cordic_io_RDATA;
output  [1:0] s_axi_cordic_io_RRESP;
output   s_axi_cordic_io_BVALID;
input   s_axi_cordic_io_BREADY;
output  [1:0] s_axi_cordic_io_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] y;
wire   [31:0] r;
reg    r_ap_vld;
reg    theta_ap_vld;
wire   [3:0] Kvalues_address0;
reg    Kvalues_ce0;
wire   [31:0] Kvalues_q0;
wire   [3:0] angles_address0;
reg    angles_ce0;
wire   [31:0] angles_q0;
reg   [31:0] grp_load_fu_191_p1;
reg   [31:0] reg_196;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln23_reg_512;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_158_p2;
reg   [31:0] reg_203;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state10_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] and_ln25_reg_552;
wire   [31:0] grp_fu_162_p2;
reg   [31:0] reg_207;
reg   [31:0] y_read_reg_494;
reg   [31:0] x_read_reg_500;
wire   [0:0] grp_fu_180_p2;
reg   [0:0] tmp_1_reg_507;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln23_fu_336_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] Kvalues_load_reg_526;
reg   [31:0] angles_load_reg_532;
reg   [31:0] y_assign_2_load_reg_538;
wire   [0:0] and_ln25_fu_403_p2;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state9_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] grp_fu_166_p2;
reg   [31:0] mul1_reg_559;
wire   [31:0] grp_fu_170_p2;
reg   [31:0] mul2_reg_564;
wire   [63:0] grp_fu_177_p1;
reg   [63:0] conv_reg_569;
wire    ap_CS_fsm_state17;
wire   [63:0] grp_fu_186_p2;
reg   [63:0] mul_reg_574;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_state12_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage2_subdone;
wire   [63:0] i_cast_fu_348_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] y_assign_2_fu_86;
wire   [31:0] select_ln25_1_fu_430_p3;
reg   [31:0] ap_sig_allocacmp_y_assign_2_load;
wire    ap_block_pp0_stage2;
wire   [31:0] select_ln16_2_fu_295_p3;
reg   [31:0] x_temp_fu_90;
wire   [31:0] select_ln25_2_fu_437_p3;
reg   [31:0] ap_sig_allocacmp_x_temp_load;
wire   [31:0] select_ln16_3_fu_302_p3;
reg   [31:0] empty_fu_94;
wire   [31:0] select_ln25_fu_409_p3;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state11_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] select_ln16_1_fu_287_p3;
reg   [4:0] i_fu_98;
wire   [4:0] add_ln23_fu_342_p2;
reg   [31:0] storemerge_fu_102;
wire   [31:0] bitcast_ln28_fu_416_p1;
wire   [31:0] select_ln16_fu_279_p3;
wire    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state26;
reg   [31:0] grp_fu_158_p0;
reg   [31:0] grp_fu_158_p1;
wire    ap_block_pp0_stage6;
reg   [31:0] grp_fu_162_p0;
reg   [31:0] grp_fu_162_p1;
wire    ap_CS_fsm_state25;
reg   [31:0] grp_fu_180_p0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_state18;
wire   [31:0] bitcast_ln16_fu_216_p1;
wire   [7:0] tmp_fu_219_p4;
wire   [22:0] trunc_ln16_fu_229_p1;
wire   [0:0] icmp_ln16_1_fu_239_p2;
wire   [0:0] icmp_ln16_fu_233_p2;
wire   [0:0] or_ln16_fu_245_p2;
wire   [31:0] xor_ln17_fu_256_p2;
wire   [31:0] bitcast_ln18_fu_266_p1;
wire   [31:0] xor_ln18_fu_269_p2;
wire   [0:0] and_ln16_fu_251_p2;
wire   [31:0] bitcast_ln18_1_fu_275_p1;
wire   [31:0] bitcast_ln17_fu_262_p1;
wire    ap_block_pp0_stage5;
wire   [31:0] bitcast_ln25_fu_368_p1;
wire   [7:0] tmp_2_fu_371_p4;
wire   [22:0] trunc_ln25_fu_381_p1;
wire   [0:0] icmp_ln25_1_fu_391_p2;
wire   [0:0] icmp_ln25_fu_385_p2;
wire   [0:0] or_ln25_fu_397_p2;
wire    ap_block_pp0_stage7;
wire   [31:0] grp_fu_174_p1;
reg   [1:0] grp_fu_158_opcode;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage6_00001;
reg   [1:0] grp_fu_162_opcode;
reg   [4:0] grp_fu_180_opcode;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_00001;
reg   [22:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cordiccart2pol_Kvalues #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Kvalues_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Kvalues_address0),
    .ce0(Kvalues_ce0),
    .q0(Kvalues_q0)
);

cordiccart2pol_angles #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
angles_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(angles_address0),
    .ce0(angles_ce0),
    .q0(angles_q0)
);

cordiccart2pol_cordic_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CORDIC_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CORDIC_IO_DATA_WIDTH ))
cordic_io_s_axi_U(
    .AWVALID(s_axi_cordic_io_AWVALID),
    .AWREADY(s_axi_cordic_io_AWREADY),
    .AWADDR(s_axi_cordic_io_AWADDR),
    .WVALID(s_axi_cordic_io_WVALID),
    .WREADY(s_axi_cordic_io_WREADY),
    .WDATA(s_axi_cordic_io_WDATA),
    .WSTRB(s_axi_cordic_io_WSTRB),
    .ARVALID(s_axi_cordic_io_ARVALID),
    .ARREADY(s_axi_cordic_io_ARREADY),
    .ARADDR(s_axi_cordic_io_ARADDR),
    .RVALID(s_axi_cordic_io_RVALID),
    .RREADY(s_axi_cordic_io_RREADY),
    .RDATA(s_axi_cordic_io_RDATA),
    .RRESP(s_axi_cordic_io_RRESP),
    .BVALID(s_axi_cordic_io_BVALID),
    .BREADY(s_axi_cordic_io_BREADY),
    .BRESP(s_axi_cordic_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .y(y),
    .r(r),
    .r_ap_vld(r_ap_vld),
    .theta(storemerge_fu_102),
    .theta_ap_vld(theta_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

cordiccart2pol_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_158_p0),
    .din1(grp_fu_158_p1),
    .opcode(grp_fu_158_opcode),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

cordiccart2pol_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_162_p0),
    .din1(grp_fu_162_p1),
    .opcode(grp_fu_162_opcode),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

cordiccart2pol_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_sig_allocacmp_y_assign_2_load),
    .din1(Kvalues_load_reg_526),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

cordiccart2pol_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_load_fu_191_p1),
    .din1(Kvalues_load_reg_526),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

cordiccart2pol_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_reg_574),
    .ce(1'b1),
    .dout(grp_fu_174_p1)
);

cordiccart2pol_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_load_fu_191_p1),
    .ce(1'b1),
    .dout(grp_fu_177_p1)
);

cordiccart2pol_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_180_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(grp_fu_180_opcode),
    .dout(grp_fu_180_p2)
);

cordiccart2pol_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv_reg_569),
    .din1(64'd4603644390932755146),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_fu_94 <= select_ln16_1_fu_287_p3;
    end else if (((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        empty_fu_94 <= select_ln25_fu_409_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_98 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln23_fu_336_p2 == 1'd0))) begin
        i_fu_98 <= add_ln23_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        storemerge_fu_102 <= select_ln16_fu_279_p3;
    end else if (((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        storemerge_fu_102 <= bitcast_ln28_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_temp_fu_90 <= select_ln16_3_fu_302_p3;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_temp_fu_90 <= select_ln25_2_fu_437_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_assign_2_fu_86 <= select_ln16_2_fu_295_p3;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        y_assign_2_fu_86 <= select_ln25_1_fu_430_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Kvalues_load_reg_526 <= Kvalues_q0;
        angles_load_reg_532 <= angles_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        and_ln25_reg_552 <= and_ln25_fu_403_p2;
        mul1_reg_559 <= grp_fu_166_p2;
        mul2_reg_564 <= grp_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_reg_569 <= grp_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln23_reg_512 <= icmp_ln23_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_reg_574 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_196 <= grp_load_fu_191_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'd0 == and_ln25_reg_552) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln25_reg_552) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        reg_203 <= grp_fu_158_p2;
        reg_207 <= grp_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_1_reg_507 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        x_read_reg_500 <= x;
        y_read_reg_494 <= y;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        y_assign_2_load_reg_538 <= ap_sig_allocacmp_y_assign_2_load;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Kvalues_ce0 = 1'b1;
    end else begin
        Kvalues_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        angles_ce0 = 1'b1;
    end else begin
        angles_ce0 = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln23_fu_336_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_sig_allocacmp_x_temp_load = select_ln25_2_fu_437_p3;
    end else begin
        ap_sig_allocacmp_x_temp_load = x_temp_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_sig_allocacmp_y_assign_2_load = select_ln25_1_fu_430_p3;
    end else begin
        ap_sig_allocacmp_y_assign_2_load = y_assign_2_fu_86;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln25_reg_552) & (icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_158_opcode = 2'd1;
    end else if ((((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln25_reg_552)) | ((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage2_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_158_opcode = 2'd0;
    end else begin
        grp_fu_158_opcode = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln25_reg_552)) | ((1'd0 == and_ln25_reg_552) & (icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_158_p0 = reg_196;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_158_p0 = empty_fu_94;
    end else begin
        grp_fu_158_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln25_reg_552)) | ((1'd0 == and_ln25_reg_552) & (icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_158_p1 = mul1_reg_559;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_158_p1 = angles_load_reg_532;
    end else begin
        grp_fu_158_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln25_reg_552)) | ((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage2_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_162_opcode = 2'd1;
    end else if (((1'd0 == and_ln25_reg_552) & (icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_162_opcode = 2'd0;
    end else begin
        grp_fu_162_opcode = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln25_reg_552)) | ((1'd0 == and_ln25_reg_552) & (icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_162_p0 = y_assign_2_load_reg_538;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_162_p0 = empty_fu_94;
    end else begin
        grp_fu_162_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'd1 == and_ln25_reg_552)) | ((1'd0 == and_ln25_reg_552) & (icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_162_p1 = mul2_reg_564;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_162_p1 = angles_load_reg_532;
    end else begin
        grp_fu_162_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage4_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_180_opcode = 5'd2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_180_opcode = 5'd4;
    end else begin
        grp_fu_180_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_180_p0 = y_assign_2_load_reg_538;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_180_p0 = x;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_load_fu_191_p1 = x_temp_fu_90;
    end else if (((icmp_ln23_reg_512 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_load_fu_191_p1 = ap_sig_allocacmp_x_temp_load;
    end else begin
        grp_load_fu_191_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        r_ap_vld = 1'b1;
    end else begin
        r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        theta_ap_vld = 1'b1;
    end else begin
        theta_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln23_fu_336_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln23_fu_336_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Kvalues_address0 = i_cast_fu_348_p1;

assign add_ln23_fu_342_p2 = (i_fu_98 + 5'd1);

assign and_ln16_fu_251_p2 = (tmp_1_reg_507 & or_ln16_fu_245_p2);

assign and_ln25_fu_403_p2 = (or_ln25_fu_397_p2 & grp_fu_180_p2);

assign angles_address0 = i_cast_fu_348_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln16_fu_216_p1 = x_read_reg_500;

assign bitcast_ln17_fu_262_p1 = xor_ln17_fu_256_p2;

assign bitcast_ln18_1_fu_275_p1 = xor_ln18_fu_269_p2;

assign bitcast_ln18_fu_266_p1 = y_read_reg_494;

assign bitcast_ln25_fu_368_p1 = y_assign_2_load_reg_538;

assign bitcast_ln28_fu_416_p1 = select_ln25_fu_409_p3;

assign i_cast_fu_348_p1 = i_fu_98;

assign icmp_ln16_1_fu_239_p2 = ((trunc_ln16_fu_229_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_233_p2 = ((tmp_fu_219_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_336_p2 = ((i_fu_98 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln25_1_fu_391_p2 = ((trunc_ln25_fu_381_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_385_p2 = ((tmp_2_fu_371_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln16_fu_245_p2 = (icmp_ln16_fu_233_p2 | icmp_ln16_1_fu_239_p2);

assign or_ln25_fu_397_p2 = (icmp_ln25_fu_385_p2 | icmp_ln25_1_fu_391_p2);

assign r = grp_fu_174_p1;

assign select_ln16_1_fu_287_p3 = ((and_ln16_fu_251_p2[0:0] == 1'b1) ? 32'd1078530011 : 32'd0);

assign select_ln16_2_fu_295_p3 = ((and_ln16_fu_251_p2[0:0] == 1'b1) ? bitcast_ln18_1_fu_275_p1 : y_read_reg_494);

assign select_ln16_3_fu_302_p3 = ((and_ln16_fu_251_p2[0:0] == 1'b1) ? bitcast_ln17_fu_262_p1 : x_read_reg_500);

assign select_ln16_fu_279_p3 = ((and_ln16_fu_251_p2[0:0] == 1'b1) ? 32'd1078530011 : 32'd0);

assign select_ln25_1_fu_430_p3 = ((and_ln25_reg_552[0:0] == 1'b1) ? reg_207 : reg_207);

assign select_ln25_2_fu_437_p3 = ((and_ln25_reg_552[0:0] == 1'b1) ? reg_203 : reg_203);

assign select_ln25_fu_409_p3 = ((and_ln25_reg_552[0:0] == 1'b1) ? reg_203 : reg_207);

assign tmp_2_fu_371_p4 = {{bitcast_ln25_fu_368_p1[30:23]}};

assign tmp_fu_219_p4 = {{bitcast_ln16_fu_216_p1[30:23]}};

assign trunc_ln16_fu_229_p1 = bitcast_ln16_fu_216_p1[22:0];

assign trunc_ln25_fu_381_p1 = bitcast_ln25_fu_368_p1[22:0];

assign xor_ln17_fu_256_p2 = (bitcast_ln16_fu_216_p1 ^ 32'd2147483648);

assign xor_ln18_fu_269_p2 = (bitcast_ln18_fu_266_p1 ^ 32'd2147483648);

endmodule //cordiccart2pol
