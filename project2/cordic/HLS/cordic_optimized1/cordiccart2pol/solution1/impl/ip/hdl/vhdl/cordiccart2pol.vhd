-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of cordiccart2pol is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordiccart2pol_cordiccart2pol,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.238000,HLS_SYN_LAT=79,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1252,HLS_SYN_LUT=3811,HLS_VERSION=2021_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_D : STD_LOGIC_VECTOR (11 downto 0) := "000000001101";
    constant ap_const_lv12_FF3 : STD_LOGIC_VECTOR (11 downto 0) := "111111110011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_11 : STD_LOGIC_VECTOR (11 downto 0) := "000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_6487 : STD_LOGIC_VECTOR (16 downto 0) := "00110010010000111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv30_3FFFFFFF : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111111111111111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv34_3FFFFFFFF : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111111111111111111111";
    constant ap_const_lv34_1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv17_1FFE8 : STD_LOGIC_VECTOR (16 downto 0) := "11111111111101000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv31_136E : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001001101101110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x : STD_LOGIC_VECTOR (31 downto 0);
    signal y : STD_LOGIC_VECTOR (31 downto 0);
    signal r : STD_LOGIC_VECTOR (31 downto 0);
    signal r_ap_vld : STD_LOGIC;
    signal theta : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_ap_vld : STD_LOGIC;
    signal Kvalues_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Kvalues_V_ce0 : STD_LOGIC;
    signal Kvalues_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal angles_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal angles_V_ce0 : STD_LOGIC;
    signal angles_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_read_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_read_reg_1686 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_reg_1692 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exp_tmp_reg_1697 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln574_fu_307_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln574_reg_1702 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln580_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln580_reg_1707 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1714 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_1_reg_1719 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln574_1_fu_343_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln574_1_reg_1724 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln580_1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln580_1_reg_1729 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_373_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1736 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sh_amt_fu_404_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1741 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln592_fu_418_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln592_reg_1746 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln594_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln594_reg_1751 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln590_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln590_reg_1756 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln594_fu_501_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln594_reg_1761 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln612_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln612_reg_1766 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_5_fu_547_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_5_reg_1771 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_1_fu_578_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_1776 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln592_1_fu_592_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln592_1_reg_1781 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln594_1_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln594_1_reg_1786 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln590_1_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln590_1_reg_1791 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln594_2_fu_675_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln594_2_reg_1796 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln612_1_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln612_1_reg_1801 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln590_fu_701_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln590_reg_1806 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln594_1_fu_721_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln594_1_reg_1811 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln590_1_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln590_1_reg_1816 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln594_3_fu_748_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln594_3_reg_1821 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_2_fu_833_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_2_reg_1826 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal x_i_V_2_fu_841_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_2_reg_1831 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1057_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_1836 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_V_cast_fu_877_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_V_cast_reg_1840 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_fu_270_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_1_load_1_reg_1850 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal lhs_load_reg_1855 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1171_1_fu_890_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln1547_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_1877 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_i_V_3_fu_961_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_3_reg_1887 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_3_fu_989_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_3_reg_1892 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln988_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln988_reg_1902 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Result_21_fu_1045_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_reg_1907 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_1058_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_V_4_reg_1912 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln990_fu_1066_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln990_reg_1917 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sub_ln997_fu_1099_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln997_reg_1924 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_1930 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1937 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1000_fu_1121_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1000_reg_1942 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_23_fu_1125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_reg_1947 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln996_fu_1133_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln996_reg_1953 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln988_1_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln988_1_reg_1958 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_1143_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_reg_1963 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_5_fu_1157_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_5_reg_1968 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln997_1_fu_1191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln997_1_reg_1975 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln997_fu_1197_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln997_reg_1982 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1000_1_fu_1201_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1000_1_reg_1987 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln996_1_fu_1205_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln996_1_reg_1992 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1007_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1007_reg_1997 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal select_ln1007_fu_1285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1007_reg_2002 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1011_fu_1378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1011_reg_2007 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool34_i_i713_fu_1384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool34_i_i713_reg_2012 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_9_reg_2017 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal p_Result_8_reg_2022 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_8_reg_2027 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_15_reg_2032 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state10_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal r_V_1_fu_194 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_r_V_1_load_1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal lhs_fu_198 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_lhs_load : STD_LOGIC_VECTOR (16 downto 0);
    signal theta_i_V_fu_202 : STD_LOGIC_VECTOR (16 downto 0);
    signal theta_i_V_3_fu_1013_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln1548_fu_825_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_V_fu_206 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln870_fu_871_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln564_fu_285_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_1_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln564_1_fu_321_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_18_fu_356_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln578_fu_363_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_367_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln494_fu_353_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_380_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln590_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln590_fu_392_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln590_fu_398_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln709_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_437_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln580_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln591_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln591_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln591_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln594_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln594_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln597_fu_445_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln591_fu_464_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln590_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln612_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln590_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_530_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln578_1_fu_537_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_fu_541_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln494_1_fu_527_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_fu_554_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln590_1_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln590_1_fu_566_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln590_1_fu_572_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln709_2_fu_608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_611_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_1_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln580_1_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln591_1_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln591_1_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln591_1_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln594_1_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln594_2_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln597_1_fu_619_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln591_1_fu_638_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln590_1_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln612_1_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln590_1_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln595_fu_704_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln595_fu_708_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln594_1_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_fu_713_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln595_1_fu_731_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln595_1_fu_735_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln594_3_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_1_fu_740_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln590cast_fu_755_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln613_fu_758_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln612_fu_763_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln590_1cast_fu_776_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln613_1_fu_779_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln612_1_fu_784_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_fu_769_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_i_V_fu_790_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_817_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_797_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_i_V_1_fu_811_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_i_V_1_fu_805_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_1_fu_907_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1627_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_2_fu_914_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1635_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_fu_921_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_fu_921_p2 : signal is "no";
    signal ret_V_2_fu_931_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 of ret_V_2_fu_931_p2 : signal is "no";
    signal tmp_1_fu_941_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_951_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_926_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 of ret_V_1_fu_926_p2 : signal is "no";
    signal ret_V_3_fu_936_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 of ret_V_3_fu_936_p2 : signal is "no";
    signal tmp_5_fu_969_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_979_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1171_fu_997_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal theta_i_V_1_fu_1001_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal theta_i_V_2_fu_1007_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1643_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1168_fu_1037_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_V_fu_1052_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_s_fu_1069_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Result_22_fu_1079_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1087_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_1095_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_2_fu_1151_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_11_fu_1165_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_26_fu_1175_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_1183_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1000_fu_1214_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1000_fu_1219_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln1002_fu_1229_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal lshr_ln1000_fu_1223_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln1002_fu_1232_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln1002_1_fu_1238_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln1002_fu_1244_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_15_fu_1255_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1002_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln999_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1002_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln999_fu_1278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1002_1_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lsb_index_1_fu_1293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1298_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1000_1_fu_1314_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1000_1_fu_1319_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln1000_1_fu_1323_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_13_fu_1329_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_fu_1340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln999_1_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1000_fu_1334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1002_fu_1360_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_14_fu_1365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln999_fu_1354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1002_1_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1008_fu_1390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1008_fu_1395_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln1007_fu_1404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1007_fu_1409_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal lshr_ln1007_fu_1413_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal shl_ln1008_fu_1399_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal m_fu_1418_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln1004_fu_1425_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln1014_fu_1429_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_1_fu_1432_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1011_fu_1459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1010_fu_1456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1011_fu_1464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1012_fu_1474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1012_fu_1479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1011_fu_1468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1012_fu_1483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_4_fu_1489_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1014_1_fu_1496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_1499_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1017_fu_1533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln996_fu_1526_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1017_fu_1538_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1004_1_fu_1523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_1544_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_24_fu_1551_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_2_fu_1563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1017_1_fu_1585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln996_1_fu_1578_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1017_1_fu_1590_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1015_fu_1575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_1596_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_27_fu_1603_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_3_fu_1615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1627_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1635_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1643_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_block_state9_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cordiccart2pol_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cordiccart2pol_mul_mul_14ns_17s_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component cordiccart2pol_mul_mul_17s_13ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component cordiccart2pol_Kvalues_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cordiccart2pol_angles_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cordiccart2pol_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        x : OUT STD_LOGIC_VECTOR (31 downto 0);
        y : OUT STD_LOGIC_VECTOR (31 downto 0);
        r : IN STD_LOGIC_VECTOR (31 downto 0);
        r_ap_vld : IN STD_LOGIC;
        theta : IN STD_LOGIC_VECTOR (31 downto 0);
        theta_ap_vld : IN STD_LOGIC );
    end component;



begin
    Kvalues_V_U : component cordiccart2pol_Kvalues_V
    generic map (
        DataWidth => 14,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Kvalues_V_address0,
        ce0 => Kvalues_V_ce0,
        q0 => Kvalues_V_q0);

    angles_V_U : component cordiccart2pol_angles_V
    generic map (
        DataWidth => 13,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => angles_V_address0,
        ce0 => angles_V_ce0,
        q0 => angles_V_q0);

    control_s_axi_U : component cordiccart2pol_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        x => x,
        y => y,
        r => r,
        r_ap_vld => r_ap_vld,
        theta => theta,
        theta_ap_vld => theta_ap_vld);

    fpext_32ns_64_2_no_dsp_1_U1 : component cordiccart2pol_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p1);

    fpext_32ns_64_2_no_dsp_1_U2 : component cordiccart2pol_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => y,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p1);

    mul_mul_14ns_17s_30_4_1_U3 : component cordiccart2pol_mul_mul_14ns_17s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 17,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1627_p0,
        din1 => ap_sig_allocacmp_lhs_load,
        ce => ap_const_logic_1,
        dout => grp_fu_1627_p2);

    mul_mul_14ns_17s_30_4_1_U4 : component cordiccart2pol_mul_mul_14ns_17s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 17,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1635_p0,
        din1 => grp_load_fu_270_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1635_p2);

    mul_mul_17s_13ns_31_4_1_U5 : component cordiccart2pol_mul_mul_17s_13ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_load_fu_270_p1,
        din1 => grp_fu_1643_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1643_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_V_fu_206 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1057_fu_865_p2 = ap_const_lv1_0))) then 
                i_V_fu_206 <= add_ln870_fu_871_p2;
            end if; 
        end if;
    end process;

    lhs_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                lhs_fu_198 <= y_i_V_2_reg_1826;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                lhs_fu_198 <= y_i_V_3_reg_1892;
            end if; 
        end if;
    end process;

    r_V_1_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_V_1_fu_194 <= x_i_V_2_reg_1831;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                r_V_1_fu_194 <= x_i_V_3_reg_1887;
            end if; 
        end if;
    end process;

    theta_i_V_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                theta_i_V_fu_202 <= select_ln1548_fu_825_p3;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                theta_i_V_fu_202 <= theta_i_V_3_fu_1013_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_1_reg_1729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln590_1_reg_1791 <= and_ln590_1_fu_657_p2;
                and_ln612_1_reg_1801 <= and_ln612_1_fu_695_p2;
                icmp_ln594_1_reg_1786 <= icmp_ln594_1_fu_596_p2;
                man_V_5_reg_1771 <= man_V_5_fu_547_p3;
                select_ln594_2_reg_1796 <= select_ln594_2_fu_675_p3;
                sh_amt_1_reg_1776 <= sh_amt_1_fu_578_p3;
                trunc_ln592_1_reg_1781 <= trunc_ln592_1_fu_592_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_reg_1707 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln590_reg_1756 <= and_ln590_fu_483_p2;
                and_ln612_reg_1766 <= and_ln612_fu_521_p2;
                icmp_ln594_reg_1751 <= icmp_ln594_fu_422_p2;
                man_V_2_reg_1736 <= man_V_2_fu_373_p3;
                select_ln594_reg_1761 <= select_ln594_fu_501_p3;
                sh_amt_reg_1741 <= sh_amt_fu_404_p3;
                trunc_ln592_reg_1746 <= trunc_ln592_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                exp_tmp_1_reg_1719 <= ireg_1_fu_317_p1(62 downto 52);
                exp_tmp_reg_1697 <= ireg_fu_281_p1(62 downto 52);
                icmp_ln580_1_reg_1729 <= icmp_ln580_1_fu_347_p2;
                icmp_ln580_reg_1707 <= icmp_ln580_fu_311_p2;
                p_Result_17_reg_1692 <= ireg_fu_281_p1(63 downto 63);
                p_Result_19_reg_1714 <= ireg_1_fu_317_p1(63 downto 63);
                trunc_ln574_1_reg_1724 <= trunc_ln574_1_fu_343_p1;
                trunc_ln574_reg_1702 <= trunc_ln574_fu_307_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1057_fu_865_p2 = ap_const_lv1_0))) then
                    i_V_cast_reg_1840(4 downto 0) <= i_V_cast_fu_877_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln988_reg_1902 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                icmp_ln1007_reg_1997 <= icmp_ln1007_fu_1268_p2;
                select_ln1007_reg_2002 <= select_ln1007_fu_1285_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln988_1_reg_1958 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                icmp_ln1011_reg_2007 <= icmp_ln1011_fu_1378_p2;
                tobool34_i_i713_reg_2012 <= tobool34_i_i713_fu_1384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1057_reg_1836 <= icmp_ln1057_fu_865_p2;
                icmp_ln1547_reg_1877 <= icmp_ln1547_fu_902_p2;
                x_i_V_3_reg_1887 <= x_i_V_3_fu_961_p3;
                y_i_V_3_reg_1892 <= y_i_V_3_fu_989_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                icmp_ln988_1_reg_1958 <= icmp_ln988_1_fu_1137_p2;
                p_Result_25_reg_1963 <= theta_i_V_fu_202(16 downto 16);
                sub_ln997_1_reg_1975 <= sub_ln997_1_fu_1191_p2;
                tmp_V_5_reg_1968 <= tmp_V_5_fu_1157_p3;
                trunc_ln1000_1_reg_1987 <= trunc_ln1000_1_fu_1201_p1;
                trunc_ln996_1_reg_1992 <= trunc_ln996_1_fu_1205_p1;
                trunc_ln997_reg_1982 <= trunc_ln997_fu_1197_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                icmp_ln988_reg_1902 <= icmp_ln988_fu_1040_p2;
                p_Result_21_reg_1907 <= grp_fu_1643_p2(30 downto 30);
                tmp_V_4_reg_1912 <= tmp_V_4_fu_1058_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1057_reg_1836 = ap_const_lv1_0))) then
                lhs_load_reg_1855 <= ap_sig_allocacmp_lhs_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln988_reg_1902 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                lsb_index_reg_1930 <= lsb_index_fu_1105_p2;
                p_Result_23_reg_1947 <= p_Result_23_fu_1125_p3;
                sext_ln990_reg_1917 <= sext_ln990_fu_1066_p1;
                sub_ln997_reg_1924 <= sub_ln997_fu_1099_p2;
                tmp_14_reg_1937 <= lsb_index_fu_1105_p2(31 downto 1);
                trunc_ln1000_reg_1942 <= trunc_ln1000_fu_1121_p1;
                trunc_ln996_reg_1953 <= trunc_ln996_fu_1133_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln988_1_reg_1958 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                m_8_reg_2027 <= m_5_fu_1499_p2(63 downto 1);
                p_Result_15_reg_2032 <= m_5_fu_1499_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln988_reg_1902 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                m_9_reg_2017 <= m_1_fu_1432_p2(34 downto 1);
                p_Result_8_reg_2022 <= m_1_fu_1432_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1057_reg_1836 = ap_const_lv1_0))) then
                r_V_1_load_1_reg_1850 <= grp_load_fu_270_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln612_reg_1766) and (icmp_ln580_reg_1707 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln594_1_reg_1811 <= select_ln594_1_fu_721_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln612_1_reg_1801) and (icmp_ln580_1_reg_1729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln594_3_reg_1821 <= select_ln594_3_fu_748_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_1_reg_1729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sext_ln590_1_reg_1816 <= sext_ln590_1_fu_728_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln580_reg_1707 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sext_ln590_reg_1806 <= sext_ln590_fu_701_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                x_i_V_2_reg_1831 <= x_i_V_2_fu_841_p3;
                y_i_V_2_reg_1826 <= y_i_V_2_fu_833_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                x_read_reg_1686 <= x;
                y_read_reg_1680 <= y;
            end if;
        end if;
    end process;
    i_V_cast_reg_1840(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1057_fu_865_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1057_fu_865_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1057_fu_865_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln494_1_fu_527_p1));
    F2_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln494_fu_353_p1));
    Kvalues_V_address0 <= i_V_cast_fu_877_p1(4 - 1 downto 0);

    Kvalues_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Kvalues_V_ce0 <= ap_const_logic_1;
        else 
            Kvalues_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    LD_2_fu_1563_p1 <= p_Result_24_fu_1551_p5(32 - 1 downto 0);
    LD_3_fu_1615_p1 <= p_Result_27_fu_1603_p5(32 - 1 downto 0);
    a_1_fu_1372_p2 <= (p_Result_14_fu_1365_p3 or and_ln999_fu_1354_p2);
    add_ln1002_fu_1360_p2 <= std_logic_vector(unsigned(trunc_ln997_reg_1982) + unsigned(ap_const_lv17_1FFE8));
    add_ln1007_fu_1404_p2 <= std_logic_vector(unsigned(sub_ln997_reg_1924) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1011_fu_1459_p2 <= std_logic_vector(unsigned(sub_ln997_1_reg_1975) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1017_1_fu_1590_p2 <= std_logic_vector(unsigned(sub_ln1017_1_fu_1585_p2) + unsigned(select_ln996_1_fu_1578_p3));
    add_ln1017_fu_1538_p2 <= std_logic_vector(unsigned(sub_ln1017_fu_1533_p2) + unsigned(select_ln996_fu_1526_p3));
    add_ln590_1_fu_566_p2 <= std_logic_vector(unsigned(F2_1_fu_554_p2) + unsigned(ap_const_lv12_FF3));
    add_ln590_fu_392_p2 <= std_logic_vector(unsigned(F2_fu_380_p2) + unsigned(ap_const_lv12_FF3));
    add_ln870_fu_871_p2 <= std_logic_vector(unsigned(i_V_fu_206) + unsigned(ap_const_lv5_1));
    and_ln1002_1_fu_1273_p2 <= (xor_ln1002_fu_1262_p2 and p_Result_23_reg_1947);
    and_ln1002_fu_1244_p2 <= (sext_ln990_reg_1917 and or_ln1002_1_fu_1238_p2);
    and_ln590_1_fu_657_p2 <= (xor_ln591_1_fu_651_p2 and icmp_ln590_1_fu_560_p2);
    and_ln590_fu_483_p2 <= (xor_ln591_fu_477_p2 and icmp_ln590_fu_386_p2);
    and_ln591_1_fu_632_p2 <= (xor_ln580_1_fu_627_p2 and icmp_ln591_1_fu_586_p2);
    and_ln591_fu_458_p2 <= (xor_ln580_fu_453_p2 and icmp_ln591_fu_412_p2);
    and_ln594_1_fu_717_p2 <= (icmp_ln594_reg_1751 and and_ln590_reg_1756);
    and_ln594_2_fu_669_p2 <= (xor_ln594_1_fu_663_p2 and and_ln590_1_fu_657_p2);
    and_ln594_3_fu_744_p2 <= (icmp_ln594_1_reg_1786 and and_ln590_1_reg_1791);
    and_ln594_fu_495_p2 <= (xor_ln594_fu_489_p2 and and_ln590_fu_483_p2);
    and_ln612_1_fu_695_p2 <= (xor_ln590_1_fu_689_p2 and icmp_ln612_1_fu_602_p2);
    and_ln612_fu_521_p2 <= (xor_ln590_fu_515_p2 and icmp_ln612_fu_428_p2);
    and_ln999_fu_1354_p2 <= (icmp_ln999_1_fu_1308_p2 and icmp_ln1000_fu_1334_p2);
    angles_V_address0 <= i_V_cast_reg_1840(4 - 1 downto 0);

    angles_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            angles_V_ce0 <= ap_const_logic_1;
        else 
            angles_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln1057_fu_865_p2)
    begin
        if ((icmp_ln1057_fu_865_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_lhs_load_assign_proc : process(ap_CS_fsm_pp0_stage1, y_i_V_3_reg_1892, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, lhs_fu_198)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_sig_allocacmp_lhs_load <= y_i_V_3_reg_1892;
        else 
            ap_sig_allocacmp_lhs_load <= lhs_fu_198;
        end if; 
    end process;


    ap_sig_allocacmp_r_V_1_load_1_assign_proc : process(ap_CS_fsm_pp0_stage1, x_i_V_3_reg_1887, ap_enable_reg_pp0_iter1, r_V_1_fu_194, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_sig_allocacmp_r_V_1_load_1 <= x_i_V_3_reg_1887;
        else 
            ap_sig_allocacmp_r_V_1_load_1 <= r_V_1_fu_194;
        end if; 
    end process;

    ashr_ln595_1_fu_735_p2 <= std_logic_vector(shift_right(signed(man_V_5_reg_1771),to_integer(unsigned('0' & zext_ln595_1_fu_731_p1(31-1 downto 0)))));
    ashr_ln595_fu_708_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_1736),to_integer(unsigned('0' & zext_ln595_fu_704_p1(31-1 downto 0)))));
    bitcast_ln709_2_fu_608_p1 <= y_read_reg_1680;
    bitcast_ln709_fu_434_p1 <= x_read_reg_1686;
    grp_fu_1627_p0 <= zext_ln1171_1_fu_890_p1(14 - 1 downto 0);
    grp_fu_1635_p0 <= zext_ln1171_1_fu_890_p1(14 - 1 downto 0);
    grp_fu_1643_p1 <= ap_const_lv31_136E(13 - 1 downto 0);

    grp_load_fu_270_p1_assign_proc : process(icmp_ln1057_reg_1836, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, r_V_1_fu_194, ap_sig_allocacmp_r_V_1_load_1, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_load_fu_270_p1 <= r_V_1_fu_194;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln1057_reg_1836 = ap_const_lv1_0))) then 
            grp_load_fu_270_p1 <= ap_sig_allocacmp_r_V_1_load_1;
        else 
            grp_load_fu_270_p1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_V_cast_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_fu_206),64));
    icmp_ln1000_fu_1334_p2 <= "0" when (p_Result_13_fu_1329_p2 = ap_const_lv17_0) else "1";
    icmp_ln1002_fu_1249_p2 <= "0" when (and_ln1002_fu_1244_p2 = ap_const_lv34_0) else "1";
    icmp_ln1007_fu_1268_p2 <= "1" when (signed(lsb_index_reg_1930) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1011_fu_1378_p2 <= "1" when (signed(lsb_index_1_fu_1293_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1057_fu_865_p2 <= "1" when (i_V_fu_206 = ap_const_lv5_10) else "0";
    icmp_ln1547_fu_902_p2 <= "1" when (signed(lhs_load_reg_1855) > signed(ap_const_lv17_0)) else "0";
    icmp_ln580_1_fu_347_p2 <= "1" when (trunc_ln564_1_fu_321_p1 = ap_const_lv63_0) else "0";
    icmp_ln580_fu_311_p2 <= "1" when (trunc_ln564_fu_285_p1 = ap_const_lv63_0) else "0";
    icmp_ln590_1_fu_560_p2 <= "1" when (signed(F2_1_fu_554_p2) > signed(ap_const_lv12_D)) else "0";
    icmp_ln590_fu_386_p2 <= "1" when (signed(F2_fu_380_p2) > signed(ap_const_lv12_D)) else "0";
    icmp_ln591_1_fu_586_p2 <= "1" when (F2_1_fu_554_p2 = ap_const_lv12_D) else "0";
    icmp_ln591_fu_412_p2 <= "1" when (F2_fu_380_p2 = ap_const_lv12_D) else "0";
    icmp_ln594_1_fu_596_p2 <= "1" when (unsigned(sh_amt_1_fu_578_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln594_fu_422_p2 <= "1" when (unsigned(sh_amt_fu_404_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln612_1_fu_602_p2 <= "1" when (unsigned(sh_amt_1_fu_578_p3) < unsigned(ap_const_lv12_11)) else "0";
    icmp_ln612_fu_428_p2 <= "1" when (unsigned(sh_amt_fu_404_p3) < unsigned(ap_const_lv12_11)) else "0";
    icmp_ln988_1_fu_1137_p2 <= "1" when (theta_i_V_fu_202 = ap_const_lv17_0) else "0";
    icmp_ln988_fu_1040_p2 <= "1" when (grp_fu_1643_p2 = ap_const_lv31_0) else "0";
    icmp_ln999_1_fu_1308_p2 <= "1" when (signed(tmp_18_fu_1298_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln999_fu_1209_p2 <= "1" when (signed(tmp_14_reg_1937) > signed(ap_const_lv31_0)) else "0";
    ireg_1_fu_317_p1 <= grp_fu_266_p1;
    ireg_fu_281_p1 <= grp_fu_262_p1;
    
    l_1_fu_1183_p3_proc : process(p_Result_26_fu_1175_p3)
    begin
        l_1_fu_1183_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_26_fu_1175_p3(i) = '1' then
                l_1_fu_1183_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    l_fu_1095_p1 <= tmp_fu_1087_p3(32 - 1 downto 0);
    lhs_1_fu_907_p3 <= (r_V_1_load_1_reg_1850 & ap_const_lv13_0);
    lhs_2_fu_914_p3 <= (lhs_load_reg_1855 & ap_const_lv13_0);
    lsb_index_1_fu_1293_p2 <= std_logic_vector(unsigned(sub_ln997_1_reg_1975) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_1105_p2 <= std_logic_vector(unsigned(sub_ln997_fu_1099_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln1000_1_fu_1323_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv17_1FFFF),to_integer(unsigned('0' & zext_ln1000_1_fu_1319_p1(17-1 downto 0)))));
    lshr_ln1000_fu_1223_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv34_3FFFFFFFF),to_integer(unsigned('0' & zext_ln1000_fu_1219_p1(31-1 downto 0)))));
    lshr_ln1007_fu_1413_p2 <= std_logic_vector(shift_right(unsigned(sext_ln990_reg_1917),to_integer(unsigned('0' & zext_ln1007_fu_1409_p1(31-1 downto 0)))));
    lshr_ln1011_fu_1468_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1010_fu_1456_p1),to_integer(unsigned('0' & zext_ln1011_fu_1464_p1(31-1 downto 0)))));
    m_1_fu_1432_p2 <= std_logic_vector(unsigned(zext_ln1004_fu_1425_p1) + unsigned(zext_ln1014_fu_1429_p1));
    m_4_fu_1489_p3 <= 
        lshr_ln1011_fu_1468_p2 when (icmp_ln1011_reg_2007(0) = '1') else 
        shl_ln1012_fu_1483_p2;
    m_5_fu_1499_p2 <= std_logic_vector(unsigned(m_4_fu_1489_p3) + unsigned(zext_ln1014_1_fu_1496_p1));
    m_fu_1418_p3 <= 
        lshr_ln1007_fu_1413_p2 when (icmp_ln1007_reg_1997(0) = '1') else 
        shl_ln1008_fu_1399_p2;
    man_V_1_fu_367_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln578_fu_363_p1));
    man_V_2_fu_373_p3 <= 
        man_V_1_fu_367_p2 when (p_Result_17_reg_1692(0) = '1') else 
        zext_ln578_fu_363_p1;
    man_V_4_fu_541_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln578_1_fu_537_p1));
    man_V_5_fu_547_p3 <= 
        man_V_4_fu_541_p2 when (p_Result_19_reg_1714(0) = '1') else 
        zext_ln578_1_fu_537_p1;
    or_ln1002_1_fu_1238_p2 <= (shl_ln1002_fu_1232_p2 or lshr_ln1000_fu_1223_p2);
    or_ln590_1_fu_683_p2 <= (or_ln591_1_fu_646_p2 or icmp_ln590_1_fu_560_p2);
    or_ln590_fu_509_p2 <= (or_ln591_fu_472_p2 or icmp_ln590_fu_386_p2);
    or_ln591_1_fu_646_p2 <= (icmp_ln591_1_fu_586_p2 or icmp_ln580_1_reg_1729);
    or_ln591_fu_472_p2 <= (icmp_ln591_fu_412_p2 or icmp_ln580_reg_1707);
    
    p_Result_11_fu_1165_p4_proc : process(tmp_V_5_fu_1157_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_11_fu_1165_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_1157_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for p_Result_11_fu_1165_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_11_fu_1165_p4_i) := tmp_V_5_fu_1157_p3(17-1-p_Result_11_fu_1165_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_11_fu_1165_p4 <= resvalue(17-1 downto 0);
    end process;

    p_Result_13_fu_1329_p2 <= (tmp_V_5_reg_1968 and lshr_ln1000_1_fu_1323_p2);
    p_Result_14_fu_1365_p3 <= tmp_V_5_reg_1968(to_integer(unsigned(add_ln1002_fu_1360_p2)) downto to_integer(unsigned(add_ln1002_fu_1360_p2))) when (to_integer(unsigned(add_ln1002_fu_1360_p2))>= 0 and to_integer(unsigned(add_ln1002_fu_1360_p2))<=16) else "-";
    p_Result_18_fu_356_p3 <= (ap_const_lv1_1 & trunc_ln574_reg_1702);
    p_Result_20_fu_530_p3 <= (ap_const_lv1_1 & trunc_ln574_1_reg_1724);
    p_Result_21_fu_1045_p3 <= grp_fu_1643_p2(30 downto 30);
    p_Result_22_fu_1079_p3 <= (ap_const_lv30_3FFFFFFF & p_Result_s_fu_1069_p4);
    p_Result_23_fu_1125_p3 <= sext_ln990_fu_1066_p1(to_integer(unsigned(lsb_index_fu_1105_p2)) downto to_integer(unsigned(lsb_index_fu_1105_p2))) when (to_integer(unsigned(lsb_index_fu_1105_p2))>= 0 and to_integer(unsigned(lsb_index_fu_1105_p2))<=33) else "-";
    p_Result_24_fu_1551_p5 <= (zext_ln1004_1_fu_1523_p1(63 downto 32) & tmp_3_fu_1544_p3 & zext_ln1004_1_fu_1523_p1(22 downto 0));
    p_Result_25_fu_1143_p3 <= theta_i_V_fu_202(16 downto 16);
    p_Result_26_fu_1175_p3 <= (ap_const_lv15_7FFF & p_Result_11_fu_1165_p4);
    p_Result_27_fu_1603_p5 <= (zext_ln1015_fu_1575_p1(63 downto 32) & tmp_4_fu_1596_p3 & zext_ln1015_fu_1575_p1(22 downto 0));
    
    p_Result_s_fu_1069_p4_proc : process(sext_ln990_fu_1066_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(34+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(34+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(34 - 1 downto 0);
    variable p_Result_s_fu_1069_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(34 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(34 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(34 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_21(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := sext_ln990_fu_1066_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(34-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(34-1-unsigned(ap_const_lv32_21(6-1 downto 0)));
            for p_Result_s_fu_1069_p4_i in 0 to 34-1 loop
                v0_cpy(p_Result_s_fu_1069_p4_i) := sext_ln990_fu_1066_p1(34-1-p_Result_s_fu_1069_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(34-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_1069_p4 <= resvalue(34-1 downto 0);
    end process;

    r <= 
        ap_const_lv32_0 when (icmp_ln988_reg_1902(0) = '1') else 
        LD_2_fu_1563_p1;

    r_ap_vld_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            r_ap_vld <= ap_const_logic_1;
        else 
            r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_926_p2 <= std_logic_vector(unsigned(lhs_2_fu_914_p3) - unsigned(grp_fu_1635_p2));
    ret_V_2_fu_931_p2 <= std_logic_vector(unsigned(lhs_1_fu_907_p3) - unsigned(grp_fu_1627_p2));
    ret_V_3_fu_936_p2 <= std_logic_vector(unsigned(lhs_2_fu_914_p3) + unsigned(grp_fu_1635_p2));
    ret_V_fu_921_p2 <= std_logic_vector(unsigned(lhs_1_fu_907_p3) + unsigned(grp_fu_1627_p2));
    select_ln1007_fu_1285_p3 <= 
        select_ln999_fu_1278_p3 when (icmp_ln1007_fu_1268_p2(0) = '1') else 
        and_ln1002_1_fu_1273_p2;
    select_ln1548_fu_825_p3 <= 
        ap_const_lv17_6487 when (tmp_12_fu_817_p3(0) = '1') else 
        ap_const_lv17_0;
    select_ln591_1_fu_638_p3 <= 
        trunc_ln592_1_fu_592_p1 when (and_ln591_1_fu_632_p2(0) = '1') else 
        ap_const_lv17_0;
    select_ln591_fu_464_p3 <= 
        trunc_ln592_fu_418_p1 when (and_ln591_fu_458_p2(0) = '1') else 
        ap_const_lv17_0;
    select_ln594_1_fu_721_p3 <= 
        trunc_ln595_fu_713_p1 when (and_ln594_1_fu_717_p2(0) = '1') else 
        select_ln594_reg_1761;
    select_ln594_2_fu_675_p3 <= 
        select_ln597_1_fu_619_p3 when (and_ln594_2_fu_669_p2(0) = '1') else 
        select_ln591_1_fu_638_p3;
    select_ln594_3_fu_748_p3 <= 
        trunc_ln595_1_fu_740_p1 when (and_ln594_3_fu_744_p2(0) = '1') else 
        select_ln594_2_reg_1796;
    select_ln594_fu_501_p3 <= 
        select_ln597_fu_445_p3 when (and_ln594_fu_495_p2(0) = '1') else 
        select_ln591_fu_464_p3;
    select_ln597_1_fu_619_p3 <= 
        ap_const_lv17_1FFFF when (tmp_10_fu_611_p3(0) = '1') else 
        ap_const_lv17_0;
    select_ln597_fu_445_p3 <= 
        ap_const_lv17_1FFFF when (tmp_8_fu_437_p3(0) = '1') else 
        ap_const_lv17_0;
    select_ln612_1_fu_784_p3 <= 
        shl_ln613_1_fu_779_p2 when (and_ln612_1_reg_1801(0) = '1') else 
        select_ln594_3_reg_1821;
    select_ln612_fu_763_p3 <= 
        shl_ln613_fu_758_p2 when (and_ln612_reg_1766(0) = '1') else 
        select_ln594_1_reg_1811;
    select_ln996_1_fu_1578_p3 <= 
        ap_const_lv8_7F when (p_Result_15_reg_2032(0) = '1') else 
        ap_const_lv8_7E;
    select_ln996_fu_1526_p3 <= 
        ap_const_lv8_7F when (p_Result_8_reg_2022(0) = '1') else 
        ap_const_lv8_7E;
    select_ln999_fu_1278_p3 <= 
        icmp_ln1002_fu_1249_p2 when (icmp_ln999_fu_1209_p2(0) = '1') else 
        p_Result_23_reg_1947;
        sext_ln590_1_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_1776),32));

    sext_ln590_1cast_fu_776_p1 <= sext_ln590_1_reg_1816(17 - 1 downto 0);
        sext_ln590_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1741),32));

    sext_ln590cast_fu_755_p1 <= sext_ln590_reg_1806(17 - 1 downto 0);
        sext_ln990_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_4_reg_1912),34));

    sh_amt_1_fu_578_p3 <= 
        add_ln590_1_fu_566_p2 when (icmp_ln590_1_fu_560_p2(0) = '1') else 
        sub_ln590_1_fu_572_p2;
    sh_amt_fu_404_p3 <= 
        add_ln590_fu_392_p2 when (icmp_ln590_fu_386_p2(0) = '1') else 
        sub_ln590_fu_398_p2;
    shl_ln1002_fu_1232_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv34_1),to_integer(unsigned('0' & zext_ln1002_fu_1229_p1(31-1 downto 0)))));
    shl_ln1008_fu_1399_p2 <= std_logic_vector(shift_left(unsigned(sext_ln990_reg_1917),to_integer(unsigned('0' & zext_ln1008_fu_1395_p1(31-1 downto 0)))));
    shl_ln1012_fu_1483_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1010_fu_1456_p1),to_integer(unsigned('0' & zext_ln1012_fu_1479_p1(31-1 downto 0)))));
    shl_ln613_1_fu_779_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln592_1_reg_1781),to_integer(unsigned('0' & sext_ln590_1cast_fu_776_p1(17-1 downto 0)))));
    shl_ln613_fu_758_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln592_reg_1746),to_integer(unsigned('0' & sext_ln590cast_fu_755_p1(17-1 downto 0)))));
    sub_ln1000_1_fu_1314_p2 <= std_logic_vector(unsigned(ap_const_lv5_A) - unsigned(trunc_ln1000_1_reg_1987));
    sub_ln1000_fu_1214_p2 <= std_logic_vector(signed(ap_const_lv6_3B) - signed(trunc_ln1000_reg_1942));
    sub_ln1008_fu_1390_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln997_reg_1924));
    sub_ln1012_fu_1474_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln997_1_reg_1975));
    sub_ln1017_1_fu_1585_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) - unsigned(trunc_ln996_1_reg_1992));
    sub_ln1017_fu_1533_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln996_reg_1953));
    sub_ln590_1_fu_572_p2 <= std_logic_vector(unsigned(ap_const_lv12_D) - unsigned(F2_1_fu_554_p2));
    sub_ln590_fu_398_p2 <= std_logic_vector(unsigned(ap_const_lv12_D) - unsigned(F2_fu_380_p2));
    sub_ln997_1_fu_1191_p2 <= std_logic_vector(unsigned(ap_const_lv32_11) - unsigned(l_1_fu_1183_p3));
    sub_ln997_fu_1099_p2 <= std_logic_vector(unsigned(ap_const_lv32_22) - unsigned(l_fu_1095_p1));
    theta <= 
        ap_const_lv32_0 when (icmp_ln988_1_reg_1958(0) = '1') else 
        LD_3_fu_1615_p1;

    theta_ap_vld_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            theta_ap_vld <= ap_const_logic_1;
        else 
            theta_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    theta_i_V_1_fu_1001_p2 <= std_logic_vector(unsigned(zext_ln1171_fu_997_p1) + unsigned(theta_i_V_fu_202));
    theta_i_V_2_fu_1007_p2 <= std_logic_vector(unsigned(theta_i_V_fu_202) - unsigned(zext_ln1171_fu_997_p1));
    theta_i_V_3_fu_1013_p3 <= 
        theta_i_V_1_fu_1001_p2 when (icmp_ln1547_reg_1877(0) = '1') else 
        theta_i_V_2_fu_1007_p2;
    tmp_10_fu_611_p3 <= bitcast_ln709_2_fu_608_p1(31 downto 31);
    tmp_11_fu_797_p3 <= x_i_V_fu_769_p3(16 downto 16);
    tmp_12_fu_817_p3 <= x_i_V_fu_769_p3(16 downto 16);
    tmp_15_fu_1255_p3 <= lsb_index_reg_1930(31 downto 31);
    tmp_18_fu_1298_p4 <= lsb_index_1_fu_1293_p2(31 downto 1);
    tmp_19_fu_1340_p3 <= lsb_index_1_fu_1293_p2(31 downto 31);
    tmp_1_fu_941_p4 <= ret_V_fu_921_p2(29 downto 13);
    tmp_2_fu_951_p4 <= ret_V_2_fu_931_p2(29 downto 13);
    tmp_3_fu_1544_p3 <= (p_Result_21_reg_1907 & add_ln1017_fu_1538_p2);
    tmp_4_fu_1596_p3 <= (p_Result_25_reg_1963 & add_ln1017_1_fu_1590_p2);
    tmp_5_fu_969_p4 <= ret_V_1_fu_926_p2(29 downto 13);
    tmp_6_fu_979_p4 <= ret_V_3_fu_936_p2(29 downto 13);
    tmp_8_fu_437_p3 <= bitcast_ln709_fu_434_p1(31 downto 31);
    tmp_V_2_fu_1151_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(theta_i_V_fu_202));
    tmp_V_4_fu_1058_p3 <= 
        tmp_V_fu_1052_p2 when (p_Result_21_fu_1045_p3(0) = '1') else 
        trunc_ln1168_fu_1037_p1;
    tmp_V_5_fu_1157_p3 <= 
        tmp_V_2_fu_1151_p2 when (p_Result_25_fu_1143_p3(0) = '1') else 
        theta_i_V_fu_202;
    tmp_V_fu_1052_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(trunc_ln1168_fu_1037_p1));
    
    tmp_fu_1087_p3_proc : process(p_Result_22_fu_1079_p3)
    begin
        tmp_fu_1087_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_22_fu_1079_p3(i) = '1' then
                tmp_fu_1087_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tobool34_i_i713_fu_1384_p2 <= (xor_ln1002_1_fu_1348_p2 and a_1_fu_1372_p2);
    trunc_ln1000_1_fu_1201_p1 <= sub_ln997_1_fu_1191_p2(5 - 1 downto 0);
    trunc_ln1000_fu_1121_p1 <= sub_ln997_fu_1099_p2(6 - 1 downto 0);
    trunc_ln1168_fu_1037_p1 <= grp_fu_1643_p2(30 - 1 downto 0);
    trunc_ln564_1_fu_321_p1 <= ireg_1_fu_317_p1(63 - 1 downto 0);
    trunc_ln564_fu_285_p1 <= ireg_fu_281_p1(63 - 1 downto 0);
    trunc_ln574_1_fu_343_p1 <= ireg_1_fu_317_p1(52 - 1 downto 0);
    trunc_ln574_fu_307_p1 <= ireg_fu_281_p1(52 - 1 downto 0);
    trunc_ln592_1_fu_592_p1 <= man_V_5_fu_547_p3(17 - 1 downto 0);
    trunc_ln592_fu_418_p1 <= man_V_2_fu_373_p3(17 - 1 downto 0);
    trunc_ln595_1_fu_740_p1 <= ashr_ln595_1_fu_735_p2(17 - 1 downto 0);
    trunc_ln595_fu_713_p1 <= ashr_ln595_fu_708_p2(17 - 1 downto 0);
    trunc_ln996_1_fu_1205_p1 <= l_1_fu_1183_p3(8 - 1 downto 0);
    trunc_ln996_fu_1133_p1 <= tmp_fu_1087_p3(8 - 1 downto 0);
    trunc_ln997_fu_1197_p1 <= sub_ln997_1_fu_1191_p2(17 - 1 downto 0);
    x_i_V_1_fu_805_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(x_i_V_fu_769_p3));
    x_i_V_2_fu_841_p3 <= 
        x_i_V_1_fu_805_p2 when (tmp_11_fu_797_p3(0) = '1') else 
        x_i_V_fu_769_p3;
    x_i_V_3_fu_961_p3 <= 
        tmp_1_fu_941_p4 when (icmp_ln1547_fu_902_p2(0) = '1') else 
        tmp_2_fu_951_p4;
    x_i_V_fu_769_p3 <= 
        ap_const_lv17_0 when (icmp_ln580_reg_1707(0) = '1') else 
        select_ln612_fu_763_p3;
    xor_ln1002_1_fu_1348_p2 <= (tmp_19_fu_1340_p3 xor ap_const_lv1_1);
    xor_ln1002_fu_1262_p2 <= (tmp_15_fu_1255_p3 xor ap_const_lv1_1);
    xor_ln580_1_fu_627_p2 <= (icmp_ln580_1_reg_1729 xor ap_const_lv1_1);
    xor_ln580_fu_453_p2 <= (icmp_ln580_reg_1707 xor ap_const_lv1_1);
    xor_ln590_1_fu_689_p2 <= (or_ln590_1_fu_683_p2 xor ap_const_lv1_1);
    xor_ln590_fu_515_p2 <= (or_ln590_fu_509_p2 xor ap_const_lv1_1);
    xor_ln591_1_fu_651_p2 <= (or_ln591_1_fu_646_p2 xor ap_const_lv1_1);
    xor_ln591_fu_477_p2 <= (or_ln591_fu_472_p2 xor ap_const_lv1_1);
    xor_ln594_1_fu_663_p2 <= (icmp_ln594_1_fu_596_p2 xor ap_const_lv1_1);
    xor_ln594_fu_489_p2 <= (icmp_ln594_fu_422_p2 xor ap_const_lv1_1);
    y_i_V_1_fu_811_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(y_i_V_fu_790_p3));
    y_i_V_2_fu_833_p3 <= 
        y_i_V_1_fu_811_p2 when (tmp_11_fu_797_p3(0) = '1') else 
        y_i_V_fu_790_p3;
    y_i_V_3_fu_989_p3 <= 
        tmp_5_fu_969_p4 when (icmp_ln1547_fu_902_p2(0) = '1') else 
        tmp_6_fu_979_p4;
    y_i_V_fu_790_p3 <= 
        ap_const_lv17_0 when (icmp_ln580_1_reg_1729(0) = '1') else 
        select_ln612_1_fu_784_p3;
    zext_ln1000_1_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1000_1_fu_1314_p2),17));
    zext_ln1000_fu_1219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1000_fu_1214_p2),34));
    zext_ln1002_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_reg_1930),34));
    zext_ln1004_1_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_9_reg_2017),64));
    zext_ln1004_fu_1425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_fu_1418_p3),35));
    zext_ln1007_fu_1409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1007_fu_1404_p2),34));
    zext_ln1008_fu_1395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1008_fu_1390_p2),34));
    zext_ln1010_fu_1456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1968),64));
    zext_ln1011_fu_1464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1011_fu_1459_p2),64));
    zext_ln1012_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1012_fu_1474_p2),64));
    zext_ln1014_1_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tobool34_i_i713_reg_2012),64));
    zext_ln1014_fu_1429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1007_reg_2002),35));
    zext_ln1015_fu_1575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_8_reg_2027),64));
    zext_ln1171_1_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kvalues_V_q0),30));
    zext_ln1171_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(angles_V_q0),17));
    zext_ln494_1_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_1_reg_1719),12));
    zext_ln494_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_1697),12));
    zext_ln578_1_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_20_fu_530_p3),54));
    zext_ln578_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_18_fu_356_p3),54));
    zext_ln595_1_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln590_1_fu_728_p1),54));
    zext_ln595_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln590_fu_701_p1),54));
end behav;
